{
  "address": "0xA05C057BD004b8B83D48937F0274787fA5fB4690",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eoaSafeCaller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IErc20Adapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "AdapterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IErc20Adapter[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "AllocationsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlying",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesMinted",
          "type": "uint256"
        }
      ],
      "name": "FeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Rebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "SetFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBalance",
          "type": "uint256"
        }
      ],
      "name": "SetMaximumUnderlying",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        }
      ],
      "name": "SetPerformanceFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveRatio",
          "type": "uint256"
        }
      ],
      "name": "SetReserveRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardsSeller",
          "type": "address"
        }
      ],
      "name": "SetRewardsSeller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlying",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canChangeCompositionAfter",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDistribution",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IErc20Adapter[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "weights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "balances",
              "type": "uint256[]"
            },
            {
              "internalType": "int256[]",
              "name": "liquidityDeltas",
              "type": "int256[]"
            },
            {
              "internalType": "uint256",
              "name": "netAPR",
              "type": "uint256"
            }
          ],
          "internalType": "struct INirnVault.DistributionParameters",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "totalProductiveBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eoaSafeCaller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdaptersAndWeights",
      "outputs": [
        {
          "internalType": "contract IErc20Adapter[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLiquidityDeltas",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "liquidityDeltas",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerFullShareWithFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsSeller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumAPRImprovement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCompositionChangeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceAtLastFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IErc20Adapter[]",
          "name": "proposedAdapters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "proposedWeights",
          "type": "uint256[]"
        }
      ],
      "name": "rebalanceWithNewAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "proposedWeights",
          "type": "uint256[]"
        }
      ],
      "name": "rebalanceWithNewWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAdapterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveRatio",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsSeller",
      "outputs": [
        {
          "internalType": "contract IRewardsSeller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsToken",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "sellRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maximumUnderlying",
          "type": "uint256"
        }
      ],
      "name": "setMaximumUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_performanceFee",
          "type": "uint64"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_reserveRatio",
          "type": "uint64"
        }
      ],
      "name": "setReserveRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardsSeller",
          "name": "_rewardsSeller",
          "type": "address"
        }
      ],
      "name": "setRewardsSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IErc20Adapter",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "withdrawFromUnusedAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3236b394ec76619d0daa9f8eaf7d809d293abe7403636c3d0dd033c04bc9752c",
  "receipt": {
    "to": null,
    "from": "0x236ECcAB8cdcfEDb099dE85c4060024bA3cE4d46",
    "contractAddress": "0xA05C057BD004b8B83D48937F0274787fA5fB4690",
    "transactionIndex": 78,
    "gasUsed": "4947302",
    "logsBloom": "0x
    "blockHash": "0x3a11bc1697ab281f39a91d7d3329395cc5fc97cf2590dd0efb7d2091c5760923",
    "transactionHash": "0x3236b394ec76619d0daa9f8eaf7d809d293abe7403636c3d0dd033c04bc9752c",
    "logs": [
      {
        "transactionIndex": 78,
        "blockNumber": 12947865,
        "transactionHash": "0x3236b394ec76619d0daa9f8eaf7d809d293abe7403636c3d0dd033c04bc9752c",
        "address": "0xA05C057BD004b8B83D48937F0274787fA5fB4690",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0x3a11bc1697ab281f39a91d7d3329395cc5fc97cf2590dd0efb7d2091c5760923"
      }
    ],
    "blockNumber": 12947865,
    "cumulativeGasUsed": "11183260",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F2945604013Ee9f80aE2eDDb384462B681859C4",
    "0xCA116AA63Fc652D2e2b24D0EC260Fa281A1dD4CA"
  ],
  "solcInputHash": "06d89cdc5f2bce9f6e0e1e7b7ef4e3a6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eoaSafeCaller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IErc20Adapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"AdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"AllocationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"}],\"name\":\"SetMaximumUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveRatio\",\"type\":\"uint256\"}],\"name\":\"SetReserveRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsSeller\",\"type\":\"address\"}],\"name\":\"SetRewardsSeller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlying\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canChangeCompositionAfter\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDistribution\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"liquidityDeltas\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"netAPR\",\"type\":\"uint256\"}],\"internalType\":\"struct INirnVault.DistributionParameters\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalProductiveBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eoaSafeCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdaptersAndWeights\",\"outputs\":[{\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLiquidityDeltas\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"liquidityDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShareWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAPRImprovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCompositionChangeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAtLastFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IErc20Adapter[]\",\"name\":\"proposedAdapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proposedWeights\",\"type\":\"uint256[]\"}],\"name\":\"rebalanceWithNewAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"proposedWeights\",\"type\":\"uint256[]\"}],\"name\":\"rebalanceWithNewWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAdapterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsSeller\",\"outputs\":[{\"internalType\":\"contract IRewardsSeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"sellRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumUnderlying\",\"type\":\"uint256\"}],\"name\":\"setMaximumUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_performanceFee\",\"type\":\"uint64\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_reserveRatio\",\"type\":\"uint64\"}],\"name\":\"setReserveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsSeller\",\"name\":\"_rewardsSeller\",\"type\":\"address\"}],\"name\":\"setRewardsSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IErc20Adapter\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"withdrawFromUnusedAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balance()\":{\"details\":\"Returns total value of vault in `underlying`\"},\"decimals()\":{\"details\":\"ERC20 decimals \"},\"getBalances()\":{\"details\":\"Returns the value in `underlying` of the vault's deposits in each adapter.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reserveBalance()\":{\"details\":\"Returns current \\\"reserve\\\" balance, or balance of `underlying` held by the vault\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/NirnVault.sol\":\"NirnVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/OwnableProxyImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This is a modified implementation of OpenZeppelin's Ownable.sol.\\n * The modifications allow the contract to be inherited by a proxy's logic contract.\\n * Any owner-only functions on the base implementation will be unusable.\\n *\\n * By default, the owner account will be a null address which can be set by invoking\\n * a function with the `initializer` modifier. The owner can later be changed with\\n * {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner. It also makes available the `initializer` modifier, which will set\\n * the owner to `msg.sender` the first time the function is invoked, and will\\n * revert if the owner has already been set.\\n *\\n * Note: This contract should only be inherited by proxy implementation contracts\\n * where the implementation will only ever be used as the logic address for proxies.\\n * The constructor permanently locks the owner of the implementation contract, but the\\n * owner of the proxies can be configured by the first caller.\\n */\\ncontract OwnableProxyImplementation {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor() {\\n    _owner = address(1);\\n    emit OwnershipTransferred(address(0), address(1));\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner {\\n    require(_owner == msg.sender, \\\"!owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Initializes the contract setting `initialOwner` as the initial owner.\\n   * Reverts if owner has already been set.\\n   */\\n  modifier initializer(address initialOwner) {\\n    require(_owner == address(0), \\\"already initialized\\\");\\n    _owner = initialOwner;\\n    emit OwnershipTransferred(address(0), initialOwner);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Modified from OZ contract - sets owner to address(1) to prevent\\n    // the initializer from being invoked after ownership is revoked.\\n    emit OwnershipTransferred(_owner, address(1));\\n    _owner = address(1);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0xf2805abf1ff24b2a81e8db6ccc1369e3f1a53d8742a809710334b54a615df018\",\"license\":\"MIT\"},\"contracts/interfaces/IAdapterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IAdapterRegistry {\\n/* ========== Events ========== */\\n\\n  event ProtocolAdapterAdded(uint256 protocolId, address protocolAdapter);\\n\\n  event ProtocolAdapterRemoved(uint256 protocolId);\\n\\n  event TokenAdapterAdded(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenAdapterRemoved(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenSupportAdded(address underlying);\\n\\n  event TokenSupportRemoved(address underlying);\\n\\n  event VaultFactoryAdded(address factory);\\n\\n  event VaultFactoryRemoved(address factory);\\n\\n  event VaultAdded(address underlying, address vault);\\n\\n  event VaultRemoved(address underlying, address vault);\\n\\n/* ========== Structs ========== */\\n\\n  struct TokenAdapter {\\n    address adapter;\\n    uint96 protocolId;\\n  }\\n\\n/* ========== Storage ========== */\\n\\n  function protocolsCount() external view returns (uint256);\\n\\n  function protocolAdapters(uint256 id) external view returns (address protocolAdapter);\\n\\n  function protocolAdapterIds(address protocolAdapter) external view returns (uint256 id);\\n\\n  function vaultsByUnderlying(address underlying) external view returns (address vault);\\n\\n  function approvedVaultFactories(address factory) external view returns (bool approved);\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external;\\n\\n  function removeVaultFactory(address _factory) external;\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external;\\n\\n  function removeVault(address vault) external;\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external returns (uint256 id);\\n\\n  function removeProtocolAdapter(address protocolAdapter) external;\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function addTokenAdapter(address adapter) external;\\n\\n  function addTokenAdapters(address[] calldata adapters) external;\\n\\n  function removeTokenAdapter(address adapter) external;\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view returns (address[] memory);\\n\\n  function haveVaultFor(address underlying) external view returns (bool);\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view returns (address[] memory adapters, uint256[] memory ids);\\n\\n  function getProtocolMetadata(uint256 id) external view returns (address protocolAdapter, string memory name);\\n\\n  function getProtocolForTokenAdapter(address adapter) external view returns (address protocolAdapter);\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view returns (bool);\\n\\n  function getSupportedTokens() external view returns (address[] memory list);\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view returns (bool);\\n\\n  function getAdaptersList(address underlying) external view returns (address[] memory list);\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view returns (address);\\n\\n  function getAdaptersCount(address underlying) external view returns (uint256);\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdapterWithHighestAPR(address underlying) external view returns (address adapter, uint256 apr);\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view returns (address adapter, uint256 apr);\\n}\\n\\n\",\"keccak256\":\"0x1c14c07f116309a29f39ebaf473e3a810dc7b018cfaea67982872a66bec899d9\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IERC20 {\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x436755b75438baab8bab2cd1147a6f8cb6232bd0d04b7248f339869d5fcf4ce5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IERC20Metadata {\\n  function name() external view returns (string memory);\\n  function symbol() external view returns (string memory);\\n  function decimals() external view returns (uint8);\\n}\\n\\n\\ninterface IERC20MetadataBytes32 {\\n  function name() external view returns (bytes32);\\n  function symbol() external view returns (bytes32);\\n}\",\"keccak256\":\"0xfb255b254a04d6d9916a03efedd274240b1dc5ca88192f782fe311dc49d1ee97\",\"license\":\"MIT\"},\"contracts/interfaces/INirnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IAdapterRegistry.sol\\\";\\nimport \\\"./ITokenAdapter.sol\\\";\\nimport \\\"./IRewardsSeller.sol\\\";\\n\\n\\ninterface INirnVault {\\n/* ========== Events ========== */\\n\\n  /** @dev Emitted when an adapter is removed and its balance fully withdrawn. */\\n  event AdapterRemoved(IErc20Adapter adapter);\\n\\n  /** @dev Emitted when weights or adapters are updated. */\\n  event AllocationsUpdated(IErc20Adapter[] adapters, uint256[] weights);\\n\\n  /** @dev Emitted when performance fees are claimed. */\\n  event FeesClaimed(uint256 underlyingAmount, uint256 sharesMinted);\\n\\n  /** @dev Emitted when a rebalance happens without allocation changes. */\\n  event Rebalanced();\\n\\n  /** @dev Emitted when max underlying is updated. */\\n  event SetMaximumUnderlying(uint256 maxBalance);\\n\\n  /** @dev Emitted when fee recipient address is set. */\\n  event SetFeeRecipient(address feeRecipient);\\n\\n  /** @dev Emitted when performance fee is set. */\\n  event SetPerformanceFee(uint256 performanceFee);\\n\\n  /** @dev Emitted when reserve ratio is set. */\\n  event SetReserveRatio(uint256 reserveRatio);\\n\\n  /** @dev Emitted when rewards seller contract is set. */\\n  event SetRewardsSeller(address rewardsSeller);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Deposit(uint256 shares, uint256 underlying);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Withdrawal(uint256 shares, uint256 underlying);\\n\\n/* ========== Structs ========== */\\n\\n  struct DistributionParameters {\\n    IErc20Adapter[] adapters;\\n    uint256[] weights;\\n    uint256[] balances;\\n    int256[] liquidityDeltas;\\n    uint256 netAPR;\\n  }\\n\\n/* ========== Initializer ========== */\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external;\\n\\n/* ========== Config Queries ========== */\\n\\n  function minimumAPRImprovement() external view returns (uint256);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function eoaSafeCaller() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function feeRecipient() external view returns (address);\\n\\n  function rewardsSeller() external view returns (IRewardsSeller);\\n\\n  function lockedTokens(address) external view returns (bool);\\n\\n  function maximumUnderlying() external view returns (uint256);\\n\\n  function performanceFee() external view returns (uint64);\\n\\n  function reserveRatio() external view returns (uint64);\\n\\n  function priceAtLastFee() external view returns (uint128);\\n\\n  function minimumCompositionChangeDelay() external view returns (uint256);\\n\\n  function canChangeCompositionAfter() external view returns (uint96);\\n\\n/* ========== Admin Actions ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external;\\n\\n  function setPerformanceFee(uint64 _performanceFee) external;\\n\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external;\\n\\n  function setReserveRatio(uint64 _reserveRatio) external;\\n\\n/* ========== Balance Queries ========== */\\n\\n  function balance() external view returns (uint256 sum);\\n\\n  function reserveBalance() external view returns (uint256);\\n\\n/* ========== Fee Queries ========== */\\n\\n  function getPendingFees() external view returns (uint256);\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getPricePerFullShareWithFee() external view returns (uint256);\\n\\n/* ========== Reward Token Sales ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external;\\n\\n/* ========== Adapter Queries ========== */\\n\\n  function getBalances() external view returns (uint256[] memory balances);\\n\\n  function getAdaptersAndWeights() external view returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  );\\n\\n/* ========== Status Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view returns (int256[] memory liquidityDeltas);\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function currentDistribution() external view returns (\\n    DistributionParameters memory params,\\n    uint256 totalProductiveBalance,\\n    uint256 _reserveBalance\\n  );\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external returns (uint256 shares);\\n\\n  function depositTo(uint256 amount, address to) external returns (uint256 shares);\\n\\n  function withdraw(uint256 shares) external returns (uint256 owed);\\n\\n  function withdrawUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external;\\n\\n  function rebalanceWithNewWeights(uint256[] calldata proposedWeights) external;\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external;\\n}\",\"keccak256\":\"0x6fe2274935b60454dafb2482df577da71648386fbadfe33bb4ca0c1048ec9acf\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IRewardsSeller {\\n  /**\\n   * @dev Sell `rewardsToken` for `underlyingToken`.\\n   * Should only be called after `rewardsToken` is transferred.\\n   * @param sender - Address of account that initially triggered the call. Can be used to restrict who can trigger a sale.\\n   * @param rewardsToken - Address of the token to sell.\\n   * @param underlyingToken - Address of the token to buy.\\n   * @param params - Any additional data that the caller provided.\\n   */\\n  function sellRewards(\\n    address sender,\\n    address rewardsToken,\\n    address underlyingToken,\\n    bytes calldata params\\n  ) external;\\n}\",\"keccak256\":\"0x8a22b1dce3ac025df91db3c5d86823d386d48d27d5920acb2bf89583f5fc89e0\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IErc20Adapter {\\n/* ========== Metadata ========== */\\n\\n  function underlying() external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function availableLiquidity() external view returns (uint256);\\n\\n/* ========== Conversion ========== */\\n\\n  function toUnderlyingAmount(uint256 tokenAmount) external view returns (uint256);\\n\\n  function toWrappedAmount(uint256 underlyingAmount) external view returns (uint256);\\n\\n/* ========== Performance Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getHypotheticalAPR(int256 liquidityDelta) external view returns (uint256);\\n\\n  function getRevenueBreakdown()\\n    external\\n    view\\n    returns (\\n      address[] memory assets,\\n      uint256[] memory aprs\\n    );\\n\\n/* ========== Caller Balance Queries ========== */\\n\\n  function balanceWrapped() external view returns (uint256);\\n\\n  function balanceUnderlying() external view returns (uint256);\\n\\n/* ========== Interactions ========== */\\n\\n  function deposit(uint256 amountUnderlying) external returns (uint256 amountMinted);\\n\\n  function withdraw(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAll() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlying(uint256 amountUnderlying) external returns (uint256 amountBurned);\\n\\n  function withdrawUnderlyingUpTo(uint256 amountUnderlying) external returns (uint256 amountReceived);\\n}\\n\\ninterface IEtherAdapter is IErc20Adapter {\\n  function depositETH() external payable returns (uint256 amountMinted);\\n\\n  function withdrawAsETH(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAllAsETH() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlyingAsETH(uint256 amountUnderlying) external returns (uint256 amountBurned); \\n}\",\"keccak256\":\"0x773adf331e96b40f4ffd3ba357730987a3a0b3915f7593f47d0314ce9a181f61\",\"license\":\"MIT\"},\"contracts/libraries/AdapterHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../libraries/MinimalSignedMath.sol\\\";\\nimport \\\"../libraries/ArrayHelper.sol\\\";\\nimport \\\"../libraries/DynamicArrays.sol\\\";\\nimport \\\"../libraries/Fraction.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\n\\n\\nlibrary AdapterHelper {\\n  using Fraction for uint256;\\n  using LowGasSafeMath for uint256;\\n  using MinimalSignedMath for int256;\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using ArrayHelper for address[];\\n  using ArrayHelper for uint256[];\\n  using DynamicArrays for uint256[];\\n\\n  function packAdapterAndWeight(\\n    IErc20Adapter adapter,\\n    uint256 weight\\n  )\\n    internal\\n    pure\\n    returns (bytes32 encoded)\\n  {\\n    assembly {\\n      encoded := or(shl(96, adapter), weight)\\n    }\\n  }\\n\\n  function packAdaptersAndWeights(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  )\\n    internal\\n    pure\\n    returns (bytes32[] memory encodedArray)\\n  {\\n    uint256 len = adapters.length;\\n    encodedArray = new bytes32[](len);\\n    for (uint256 i; i < len; i++) {\\n      IErc20Adapter adapter = adapters[i];\\n      uint256 weight = weights[i];\\n      bytes32 encoded;\\n      assembly {\\n        encoded := or(shl(96, adapter), weight)\\n      }\\n      encodedArray[i] = encoded;\\n    }\\n  }\\n\\n  function unpackAdapterAndWeight(bytes32 encoded)\\n    internal\\n    pure\\n    returns (\\n      IErc20Adapter adapter,\\n      uint256 weight\\n    )\\n  {\\n    assembly {\\n      adapter := shr(96, encoded)\\n      weight := and(\\n        encoded,\\n        0x0000000000000000000000000000000000000000ffffffffffffffffffffffff\\n      )\\n    }\\n  }\\n\\n  function unpackAdaptersAndWeights(bytes32[] memory encodedArray)\\n    internal\\n    pure\\n    returns (\\n      IErc20Adapter[] memory adapters,\\n      uint256[] memory weights\\n    )\\n  {\\n    uint256 len = encodedArray.length;\\n    adapters = new IErc20Adapter[](len);\\n    weights = new uint256[](len);\\n    for (uint256 i; i < len; i++) {\\n      bytes32 encoded = encodedArray[i];\\n      IErc20Adapter adapter;\\n      uint256 weight;\\n      assembly {\\n        adapter := shr(96, encoded)\\n        weight := and(\\n          encoded,\\n          0x0000000000000000000000000000000000000000ffffffffffffffffffffffff\\n        )\\n      }\\n      adapters[i] = adapter;\\n      weights[i] = weight;\\n    }\\n  }\\n\\n  function getNetAPR(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    int256[] memory liquidityDeltas\\n  ) internal view returns (uint256 netAPR) {\\n    uint256 len = adapters.length;\\n    for (uint256 i; i < len; i++) {\\n      uint256 weight = weights[i];\\n      if (weight > 0) {\\n        netAPR = netAPR.add(\\n          adapters[i].getHypotheticalAPR(liquidityDeltas[i]).mulFractionE18(weight)\\n        );\\n      }\\n    }\\n  }\\n\\n  function getLiquidityDeltas(\\n    uint256 totalProductiveBalance,\\n    uint256[] memory balances,\\n    uint256[] memory weights\\n  ) internal pure returns (int256[] memory deltas) {\\n    uint256 len = balances.length;\\n    deltas = new int256[](len);\\n    for (uint256 i; i < len; i++) {\\n      uint256 targetBalance = totalProductiveBalance.mulFractionE18(weights[i]);\\n      deltas[i] = targetBalance.toInt256().sub(balances[i].toInt256());\\n    }\\n  }\\n\\n  function getBalances(IErc20Adapter[] memory adapters) internal view returns (uint256[] memory balances) {\\n    uint256 len = adapters.length;\\n    balances = new uint256[](len);\\n    for (uint256 i; i < len; i++) balances[i] = adapters[i].balanceUnderlying();\\n  }\\n\\n  function getExcludedAdapterIndices(\\n    IErc20Adapter[] memory oldAdapters,\\n    IErc20Adapter[] memory newAdapters\\n  ) internal pure returns (uint256[] memory excludedAdapterIndices) {\\n    uint256 selfLen = oldAdapters.length;\\n    uint256 otherLen = newAdapters.length;\\n    excludedAdapterIndices = DynamicArrays.dynamicUint256Array(selfLen);\\n    for (uint256 i; i < selfLen; i++) {\\n      IErc20Adapter element = oldAdapters[i];\\n      for (uint256 j; j < otherLen; j++) {\\n        if (element == newAdapters[j]) {\\n          element = IErc20Adapter(0);\\n          break;\\n        }\\n      }\\n      if (element != IErc20Adapter(0)) {\\n        excludedAdapterIndices.dynamicPush(i);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Rebalances the vault by withdrawing tokens from adapters with negative liquidity deltas\\n   * and depositing to adapters with positive liquidity deltas.\\n   *\\n   * Note: This does not necessarily result in a vault composition that matches the assigned weights,\\n   * as some of the lending markets for adapters with negative deltas may have insufficient liquidity\\n   * to process withdrawals of the desired amounts. In this case, the vault will withdraw what it can\\n   * and deposit up to the amount withdrawn to the other markets.\\n   *\\n   * Returns an array with indices of the adapters that both have a weight of zero and were able to\\n   * process a withdrawal of the vault's full balance. This array is used to remove those adapters.\\n   */\\n  function rebalance(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    int256[] memory liquidityDeltas,\\n    uint256 reserveBalance\\n  ) internal returns (uint256[] memory removedIndices) {\\n    uint256 len = liquidityDeltas.length;\\n    removedIndices = DynamicArrays.dynamicUint256Array(len);\\n    uint256 totalAvailableBalance = reserveBalance;\\n    // Execute withdrawals first\\n    for (uint256 i; i < len; i++) {\\n      int256 delta = liquidityDeltas[i];\\n      if (delta < 0) {\\n        uint256 amountToWithdraw = (-delta).toUint256();\\n        uint256 amountWithdrawn = adapters[i].withdrawUnderlyingUpTo(amountToWithdraw);\\n        // If the weight is 0, `amountToWithdraw` is the balance of the vault in the adapter\\n        // and the vault intends to remove the adapter. If the rebalance is able to withdraw\\n        // the full balance, it will mark the index of the adapter as able to be removed\\n        // so that it can be deleted by the rebalance function.\\n        if (weights[i] == 0 && amountWithdrawn == amountToWithdraw) {\\n          removedIndices.dynamicPush(i);\\n        }\\n        totalAvailableBalance = totalAvailableBalance.add(amountWithdrawn);\\n      }\\n    }\\n    // Execute deposits after\\n    for (uint256 i; i < len; i++) {\\n      int256 delta = liquidityDeltas[i];\\n      if (delta > 0) {\\n        if (totalAvailableBalance == 0) break;\\n        uint256 amountToDeposit = delta.toUint256();\\n        if (amountToDeposit >= totalAvailableBalance) {\\n          IErc20Adapter(adapters[i]).deposit(totalAvailableBalance);\\n          break;\\n        }\\n        IErc20Adapter(adapters[i]).deposit(amountToDeposit);\\n        totalAvailableBalance = totalAvailableBalance.sub(amountToDeposit);\\n      }\\n    }\\n  }\\n}\",\"keccak256\":\"0xf4d1b97e27d6cac73125d9e0fbc9ab3ba31af2410b9ff640e77b155dcd195058\",\"license\":\"MIT\"},\"contracts/libraries/ArrayHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\n\\n\\nlibrary ArrayHelper {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using LowGasSafeMath for uint256;\\n\\n/* ========== Type Cast ========== */\\n\\n  /**\\n   * @dev Cast an enumerable address set as an address array.\\n   * The enumerable set library stores the values as a bytes32 array, this function\\n   * casts it as an address array with a pointer assignment.\\n   */\\n  function toArray(EnumerableSet.AddressSet storage set) internal view returns (address[] memory arr) {\\n    bytes32[] memory bytes32Arr = set._inner._values;\\n    assembly { arr := bytes32Arr }\\n  }\\n\\n  /**\\n   * @dev Cast an array of IErc20Adapter to an array of address using a pointer assignment.\\n   * Note: The resulting array is the same as the original, so all changes to one will be\\n   * reflected in the other.\\n   */\\n  function toAddressArray(IErc20Adapter[] memory _arr) internal pure returns (address[] memory arr) {\\n    assembly { arr := _arr }\\n  }\\n\\n/* ========== Math ========== */\\n\\n  /**\\n   * @dev Computes the sum of a uint256 array.\\n   */\\n  function sum(uint256[] memory arr) internal pure returns (uint256 _sum) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) _sum = _sum.add(arr[i]);\\n  }\\n\\n/* ========== Removal ========== */\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(uint256[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      uint256 last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(address[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      address last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(IErc20Adapter[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      IErc20Adapter last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(bytes32[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    bytes32 last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(address[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    address last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n/* ========== Search ========== */\\n\\n  /**\\n   * @dev Find the index of an address in an array.\\n   * If the address is not found, revert.\\n   */\\n  function indexOf(address[] memory arr, address find) internal pure returns (uint256) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return i;\\n    revert(\\\"element not found\\\");\\n  }\\n\\n  /**\\n   * @dev Determine whether an element is included in an array.\\n   */\\n  function includes(address[] memory arr, address find) internal pure returns (bool) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return true;\\n    return false;\\n  }\\n\\n/* ========== Sorting ========== */\\n\\n  /**\\n   * @dev Given an array of tokens and scores, sort by scores in descending order.\\n   * Maintains the relationship between elements of each array at the same index.\\n   */\\n  function sortByDescendingScore(\\n    address[] memory addresses,\\n    uint256[] memory scores\\n  ) internal pure {\\n    uint256 len = addresses.length;\\n    for (uint256 i = 0; i < len; i++) {\\n      uint256 score = scores[i];\\n      address _address = addresses[i];\\n      uint256 j = i - 1;\\n      while (int(j) >= 0 && scores[j] < score) {\\n        scores[j + 1] = scores[j];\\n        addresses[j + 1] = addresses[j];\\n        j--;\\n      }\\n      scores[j + 1] = score;\\n      addresses[j + 1] = _address;\\n    }\\n  }\\n}\",\"keccak256\":\"0xa621d7f9a4dd6a0a1a58324a4334ec3f4014d68e2d5e500f3c2290bd9178426b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DynamicArrays.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\n/**\\n * @dev Library for handling dynamic in-memory arrays.\\n *\\n * There is a very good reason for Solidity not supporting this by default -- dynamic\\n * arrays in memory completely break memory management for Solidity when used improperly;\\n * however, they can be created manually in a safe way so long as the maximum size is known\\n * beforehand.\\n *\\n * This applies primarily to situations where a subset is taken from an existing array\\n * by some filtering process.\\n *\\n * This library should not be used to bypass Solidity's lack of dynamic memory array\\n * support in any situation where the code could potentially cause the array to exceed\\n * the maximum size assigned in the array creation call. Doing so is likely to have\\n * unintended and unpredictable side effects.\\n */\\nlibrary DynamicArrays {\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicAddressArray(uint256 size) internal pure returns (address[] memory arr) {\\n    arr = new address[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed length `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicUint256Array(uint256 size) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Pushes an address to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicAddressArray`. Using it\\n   * on a typical array created with `new address[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(address[] memory arr, address element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n\\n  /**\\n   * @dev Pushes a uint256 to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicUint256Array`. Using it\\n   * on a typical array created with `new uint256[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(uint256[] memory arr, uint256 element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n}\",\"keccak256\":\"0x87fb71e6191b84e52ad1382de32d4e5831e593f5017569b2f639416a745de9ad\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Fraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\n\\n\\nlibrary Fraction {\\n  using LowGasSafeMath for uint256;\\n\\n  uint256 internal constant ONE_E18 = 1e18;\\n\\n  function mulFractionE18(uint256 a, uint256 fraction) internal pure returns (uint256) {\\n    return a.mul(fraction) / ONE_E18;\\n  }\\n\\n  function mulSubFractionE18(uint256 a, uint256 fraction) internal pure returns (uint256) {\\n    return a.sub(a.mul(fraction) / ONE_E18);\\n  }\\n\\n  function toFractionE18(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a.mul(ONE_E18) / b;\\n  }\\n}\",\"keccak256\":\"0x0fca417c9a5a86a41e7e293ccf654b735754da2c3efcb55ede07dc108500f568\",\"license\":\"MIT\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/LowGasSafeMath.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0 license\\n*************************************************************************************************/\\n\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x);\\n  }\\n\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, errorMessage);\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y <= x);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require(y <= x, errorMessage);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y);\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y, errorMessage);\\n  }\\n\\n  /// @notice Returns ceil(x / y)\\n  /// @param x The numerator\\n  /// @param y The denominator\\n  /// @return z The quotient of x and y\\n  function divCeil(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = x % y == 0 ? x / y : (x/y) + 1;\\n  }\\n}\\n\",\"keccak256\":\"0xfaf29ecfdaccdec0a6df9cd6740c35f10a928dd2129188dd66936bdc458907c2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/MinimalSignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n\\nlibrary MinimalSignedMath {\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a - b;\\n    require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function add(uint256 a, int256 b) internal pure returns (uint256) {\\n    require(a < 2**255);\\n    int256 _a = int256(a);\\n    int256 c = _a + b;\\n    require((b >= 0 && c >= _a) || (b < 0 && c < _a));\\n    if (c < 0) return 0;\\n    return uint256(c);\\n  }\\n}\",\"keccak256\":\"0x051ae536dd76fc7bcae81d8fad3d3882fea73b4351f51a0e77a016bfc96226cb\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/RebalanceValidation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../libraries/Fraction.sol\\\";\\n\\n\\n\\nlibrary RebalanceValidation {\\n  using LowGasSafeMath for uint256;\\n  using Fraction for uint256;\\n\\n  function validateSufficientImprovement(\\n    uint256 currentAPR,\\n    uint256 newAPR,\\n    uint256 minImprovement\\n  ) internal pure {\\n    require(\\n      newAPR.sub(currentAPR, \\\"!increased\\\").toFractionE18(currentAPR) >= minImprovement,\\n      \\\"insufficient improvement\\\"\\n    );\\n  }\\n\\n  function validateProposedWeights(\\n    uint256[] memory currentWeights,\\n    uint256[] memory proposedWeights\\n  ) internal pure {\\n    uint256 len = currentWeights.length;\\n    require(proposedWeights.length == len, \\\"bad lengths\\\");\\n    uint256 _sum;\\n    for (uint256 i; i < len; i++) {\\n      uint256 weight = proposedWeights[i];\\n      _sum = _sum.add(weight);\\n      if (weight == 0) {\\n        require(currentWeights[i] == 0, \\\"can not set null weight\\\");\\n      } else {\\n        require(weight >= 5e16, \\\"weight < 5%\\\");\\n      }\\n    }\\n    require(_sum == 1e18, \\\"weights != 100%\\\");\\n  }\\n\\n  function validateAdaptersAndWeights(\\n    IAdapterRegistry registry,\\n    address underlying,\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  ) internal view {\\n    uint256 len = adapters.length;\\n    require(weights.length == len, \\\"bad lengths\\\");\\n    uint256 totalWeight;\\n    for (uint256 i; i < len; i++) {\\n      IErc20Adapter adapter = adapters[i];\\n      require(registry.isApprovedAdapter(address(adapter)), \\\"!approved\\\");\\n      require(adapter.underlying() == underlying, \\\"bad adapter\\\");\\n      for (uint256 j = i + 1; j < len; j++) {\\n        require(address(adapter) != address(adapters[j]), \\\"duplicate adapter\\\");\\n      }\\n      uint256 weight = weights[i];\\n      totalWeight = totalWeight.add(weight);\\n      require(weight >= 5e16, \\\"weight < 5%\\\");\\n    }\\n    require(totalWeight == 1e18, \\\"weights != 100%\\\");\\n  }\\n}\",\"keccak256\":\"0xb6ad3e5ed75e25d419127c6dad1585e245263ae9c21afbe15422c36ea864d7ea\",\"license\":\"MIT\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/SafeCast.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0 license\\n*************************************************************************************************/\\n\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\n    require((z = uint160(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a uint128, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint128\\n  function toUint128(uint256 y) internal pure returns (uint128 z) {\\n    require((z = uint128(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a uint96, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint96\\n  function toUint96(uint256 y) internal pure returns (uint96 z) {\\n    require((z = uint96(y)) == y);\\n  }\\n\\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n  /// @param y The int256 to be downcasted\\n  /// @return z The downcasted integer, now type int128\\n  function toInt128(int256 y) internal pure returns (int128 z) {\\n    require((z = int128(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = int256(y);\\n  }\\n\\n  /// @notice Cast an int256 to a uint256, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint256(int256 y) internal pure returns (uint256 z) {\\n    require(y >= 0);\\n    z = uint256(y);\\n  }\\n}\\n\",\"keccak256\":\"0xe157af41bd80babe22cdeda8ae3f727f8c75c8428da9c20caed312765d4299ee\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SymbolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n\\nlibrary SymbolHelper {\\n\\n  /**\\n   * @dev Returns the index of the lowest bit set in `self`.\\n   * Note: Requires that `self != 0`\\n   */\\n  function lowestBitSet(uint256 self) internal pure returns (uint256 _z) {\\n    require (self > 0, \\\"Bits::lowestBitSet: Value 0 has no bits set\\\");\\n    uint256 _magic = 0x00818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\\n    uint256 val = (self & -self) * _magic >> 248;\\n    uint256 _y = val >> 5;\\n    _z = (\\n      _y < 4\\n        ? _y < 2\\n          ? _y == 0\\n            ? 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100\\n            : 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606\\n          : _y == 2\\n            ? 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707\\n            : 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e\\n        : _y < 6\\n          ? _y == 4\\n            ? 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff\\n            : 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616\\n          : _y == 6\\n            ? 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe\\n            : 0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd\\n    );\\n    _z >>= (val & 0x1f) << 3;\\n    return _z & 0xff;\\n  }\\n\\n  function getSymbol(address token) internal view returns (string memory) {\\n    (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\\\"symbol()\\\"));\\n    if (!success) return \\\"UNKNOWN\\\";\\n    if (data.length != 32) return abi.decode(data, (string));\\n    uint256 symbol = abi.decode(data, (uint256));\\n    if (symbol == 0) return \\\"UNKNOWN\\\";\\n    uint256 emptyBits = 255 - lowestBitSet(symbol);\\n    uint256 size = (emptyBits / 8) + (emptyBits % 8 > 0 ? 1 : 0);\\n    assembly { mstore(data, size) }\\n    return string(data);\\n  }\\n\\n  function getName(address token) internal view returns (string memory) {\\n    (bool success, bytes memory data) = token.staticcall(abi.encodeWithSignature(\\\"name()\\\"));\\n    if (!success) return \\\"UNKNOWN\\\";\\n    if (data.length != 32) return abi.decode(data, (string));\\n    uint256 symbol = abi.decode(data, (uint256));\\n    if (symbol == 0) return \\\"UNKNOWN\\\";\\n    uint256 emptyBits = 255 - lowestBitSet(symbol);\\n    uint256 size = (emptyBits / 8) + (emptyBits % 8 > 0 ? 1 : 0);\\n    assembly { mstore(data, size) }\\n    return string(data);\\n  }\\n\\n  function getPrefixedSymbol(string memory prefix, address token) internal view returns (string memory prefixedSymbol) {\\n    prefixedSymbol = string(abi.encodePacked(\\n      prefix,\\n      getSymbol(token)\\n    ));\\n  }\\n\\n  function getPrefixedName(string memory prefix, address token) internal view returns (string memory prefixedName) {\\n    prefixedName = string(abi.encodePacked(\\n      prefix,\\n      getName(token)\\n    ));\\n  }\\n}\",\"keccak256\":\"0x98f8cbbbdfd2d928851ce0bec9d992e23c769f81deb0f8587941ae90851b98fe\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/TransferHelper.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash cfedb1f55864dcf8cc0831fdd8ec18eb045b7fd1.\\n\\nSubject to the MIT license\\n*************************************************************************************************/\\n\\n\\nlibrary TransferHelper {\\n  function safeApproveMax(address token, address to) internal {\\n    safeApprove(token, to, type(uint256).max);\\n  }\\n\\n  function safeUnapprove(address token, address to) internal {\\n    safeApprove(token, to, 0);\\n  }\\n\\n  function safeApprove(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:SA\\\");\\n  }\\n\\n  function safeTransfer(address token, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:ST\\\");\\n  }\\n\\n  function safeTransferFrom(address token, address from, address to, uint value) internal {\\n    // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TH:STF\\\");\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(\\\"\\\");\\n    require(success, \\\"TH:STE\\\");\\n  }\\n}\",\"keccak256\":\"0xa71688f6691750ccf58139119f14e43efa269dcfcd77161515c137c15c942083\",\"license\":\"MIT\"},\"contracts/vaults/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n\\ncontract ERC20 is IERC20 {\\n  using LowGasSafeMath for uint256;\\n\\n  mapping(address => uint256) public override balanceOf;\\n\\n  mapping(address => mapping(address => uint256)) public override allowance;\\n\\n  uint256 public override totalSupply;\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(msg.sender, recipient, amount);\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    _approve(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      msg.sender,\\n      allowance[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n    );\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n    _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n    _approve(\\n      msg.sender,\\n      spender,\\n      allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    balanceOf[sender] = balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    balanceOf[recipient] = balanceOf[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    totalSupply = totalSupply.add(amount);\\n    balanceOf[account] = balanceOf[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    balanceOf[account] = balanceOf[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    totalSupply = totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    allowance[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _burnFrom(address account, uint256 amount) internal {\\n    _burn(account, amount);\\n    _approve(\\n      account,\\n      msg.sender,\\n      allowance[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\")\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xf80e4973e3a9c4c042600b4fe17807c9ba045290afbe179b42d55af2cc71b3bd\",\"license\":\"MIT\"},\"contracts/vaults/NirnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libraries/RebalanceValidation.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"./NirnVaultBase.sol\\\";\\n\\n\\ncontract NirnVault is NirnVaultBase {\\n  using Fraction for uint256;\\n  using TransferHelper for address;\\n  using LowGasSafeMath for uint256;\\n  using MinimalSignedMath for int256;\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using ArrayHelper for uint256[];\\n  using ArrayHelper for bytes32[];\\n  using ArrayHelper for IErc20Adapter[];\\n  using DynamicArrays for uint256[];\\n  using AdapterHelper for IErc20Adapter[];\\n\\n/* ========== Constructor ========== */\\n\\n  constructor(\\n    address _registry,\\n    address _eoaSafeCaller\\n  ) NirnVaultBase(_registry, _eoaSafeCaller) {}\\n\\n/* ========== Status Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view override returns (int256[] memory liquidityDeltas) {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    liquidityDeltas = AdapterHelper.getLiquidityDeltas(\\n      balanceSheet.totalProductiveBalance,\\n      balanceSheet.balances,\\n      weights\\n    );\\n  }\\n\\n  function getAPR() external view override returns (uint256) {\\n    (DistributionParameters memory params,,) = currentDistribution();\\n    return params.netAPR;\\n  }\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external override returns (uint256 shares) {\\n    shares = depositTo(amount, msg.sender);\\n  }\\n\\n  function depositTo(uint256 amount, address to) public override returns (uint256 shares) {\\n    uint256 bal = balance();\\n    uint256 max = maximumUnderlying;\\n    if (max > 0) {\\n      require(bal.add(amount) <= max, \\\"maximumUnderlying\\\");\\n    }\\n    underlying.safeTransferFrom(msg.sender, address(this), amount);\\n    uint256 supply = claimFees(bal, totalSupply);\\n    shares = supply == 0 ? amount : amount.mul(supply) / bal;\\n    _mint(to, shares);\\n    emit Deposit(shares, amount);\\n  }\\n\\n  function withdraw(uint256 shares) external override returns (uint256 amountOut) {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    uint256 supply = claimFees(balanceSheet.totalBalance, totalSupply);\\n    amountOut = shares.mul(balanceSheet.totalBalance) / supply;\\n    withdrawInternal(\\n      shares,\\n      amountOut,\\n      adapters,\\n      weights,\\n      balanceSheet\\n    );\\n  }\\n\\n  function withdrawUnderlying(uint256 amount) external override returns (uint256 shares) {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    uint256 supply = claimFees(balanceSheet.totalBalance, totalSupply);\\n    shares = amount.mul(supply) / balanceSheet.totalBalance;\\n    withdrawInternal(\\n      shares,\\n      amount,\\n      adapters,\\n      weights,\\n      balanceSheet\\n    );\\n  }\\n\\n  function withdrawInternal(\\n    uint256 shares,\\n    uint256 amountOut,\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    BalanceSheet memory balanceSheet\\n  ) internal {\\n    _burn(msg.sender, shares);\\n    emit Withdrawal(shares, amountOut);\\n    uint256 newReserves = balanceSheet.totalBalance.sub(amountOut).mulFractionE18(reserveRatio);\\n    withdrawToMatchAmount(\\n      adapters,\\n      weights,\\n      balanceSheet.balances,\\n      balanceSheet.reserveBalance,\\n      amountOut,\\n      newReserves\\n    );\\n    _transferOut(msg.sender, amountOut);\\n  }\\n\\n  function withdrawToMatchAmount(\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights,\\n    uint256[] memory balances,\\n    uint256 _reserveBalance,\\n    uint256 amount,\\n    uint256 newReserves\\n  ) internal {\\n    if (amount > _reserveBalance) {\\n      uint256 remainder = amount.sub(_reserveBalance);\\n      uint256 len = balances.length;\\n      uint256[] memory removeIndices = DynamicArrays.dynamicUint256Array(len);\\n      for (uint256 i; i < len; i++) {\\n        uint256 bal = balances[i];\\n        if (bal == 0) continue;\\n        // If the balance is sufficient to withdraw both the remainder and the new reserves,\\n        // withdraw the remainder and the new reserves. Otherwise, withdraw the balance.\\n        uint256 optimalWithdrawal = remainder.add(newReserves);\\n        uint256 amountToWithdraw = bal > optimalWithdrawal\\n          ? optimalWithdrawal\\n          : bal;\\n        uint256 amountWithdrawn = adapters[i].withdrawUnderlyingUpTo(amountToWithdraw);\\n        remainder = remainder >= amountWithdrawn ? remainder - amountWithdrawn : 0;\\n        if (weights[i] == 0 && amountWithdrawn == bal) {\\n          removeIndices.dynamicPush(i);\\n        }\\n        if (remainder == 0) break;\\n      }\\n      require(remainder == 0, \\\"insufficient available balance\\\");\\n      removeAdapters(removeIndices);\\n    }\\n  }\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external override onlyEOA {\\n    (IErc20Adapter[] memory adapters, uint256[] memory weights) = getAdaptersAndWeights();\\n    BalanceSheet memory balanceSheet = getBalanceSheet(adapters);\\n    int256[] memory liquidityDeltas = AdapterHelper.getLiquidityDeltas(balanceSheet.totalProductiveBalance, balanceSheet.balances, weights);\\n    uint256[] memory removedIndices = AdapterHelper.rebalance(\\n      adapters,\\n      weights,\\n      liquidityDeltas,\\n      balanceSheet.reserveBalance\\n    );\\n    removeAdapters(removedIndices);\\n    emit Rebalanced();\\n  }\\n\\n  function rebalanceWithNewWeights(uint256[] memory proposedWeights) external override onlyEOA changesComposition {\\n    (\\n      DistributionParameters memory params,\\n      uint256 totalProductiveBalance,\\n      uint256 _reserveBalance\\n    ) = currentDistribution();\\n    RebalanceValidation.validateProposedWeights(params.weights, proposedWeights);\\n    // Get liquidity deltas and APR for new weights\\n    int256[] memory proposedLiquidityDeltas = AdapterHelper.getLiquidityDeltas(totalProductiveBalance, params.balances, proposedWeights);\\n    uint256 proposedAPR = AdapterHelper.getNetAPR(params.adapters, proposedWeights, proposedLiquidityDeltas).mulSubFractionE18(reserveRatio);\\n    // Validate rebalance results in sufficient APR improvement\\n    RebalanceValidation.validateSufficientImprovement(params.netAPR, proposedAPR, minimumAPRImprovement);\\n    // Rebalance and remove adapters with 0 weight which the vault could fully exit.\\n    uint256[] memory removedIndices = AdapterHelper.rebalance(params.adapters, proposedWeights, proposedLiquidityDeltas, _reserveBalance);\\n    uint256 removeLen = removedIndices.length;\\n    if (removeLen > 0) {\\n      for (uint256 i = removeLen; i > 0; i--) {\\n        uint256 rI = removedIndices[i-1];\\n        emit AdapterRemoved(params.adapters[rI]);\\n        params.adapters.mremove(rI);\\n        proposedWeights.mremove(rI);\\n      }\\n    }\\n    setAdaptersAndWeights(params.adapters, proposedWeights);\\n  }\\n\\n  function currentDistribution() public view override returns (\\n    DistributionParameters memory params,\\n    uint256 totalProductiveBalance,\\n    uint256 _reserveBalance\\n  ) {\\n    uint256 _reserveRatio = reserveRatio;\\n    (params.adapters, params.weights) = getAdaptersAndWeights();\\n    uint256 len = params.adapters.length;\\n    uint256 netAPR;\\n    params.balances = params.adapters.getBalances();\\n    _reserveBalance = reserveBalance();\\n    totalProductiveBalance = params.balances.sum().add(_reserveBalance).mulSubFractionE18(_reserveRatio);\\n    params.liquidityDeltas = new int256[](len);\\n    for (uint256 i; i < len; i++) {\\n      IErc20Adapter adapter = params.adapters[i];\\n      uint256 weight = params.weights[i];\\n      uint256 targetBalance = totalProductiveBalance.mulFractionE18(weight);\\n      int256 liquidityDelta = targetBalance.toInt256().sub(params.balances[i].toInt256());\\n      netAPR = netAPR.add(\\n        adapter.getHypotheticalAPR(liquidityDelta).mulFractionE18(weight)\\n      );\\n      params.liquidityDeltas[i] = liquidityDelta;\\n    }\\n    params.netAPR = netAPR.mulSubFractionE18(_reserveRatio);\\n  }\\n\\n  function processProposedDistribution(\\n    DistributionParameters memory currentParams,\\n    uint256 totalProductiveBalance,\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) internal view returns (DistributionParameters memory params) {\\n    uint256[] memory excludedAdapterIndices = currentParams.adapters.getExcludedAdapterIndices(proposedAdapters);\\n    uint256 proposedSize = proposedAdapters.length;\\n    uint256 expandedSize = proposedAdapters.length + excludedAdapterIndices.length;\\n    params.adapters = new IErc20Adapter[](expandedSize);\\n    params.weights = new uint256[](expandedSize);\\n    params.balances = new uint256[](expandedSize);\\n    params.liquidityDeltas = new int256[](expandedSize);\\n    uint256 i;\\n    uint256 netAPR;\\n    for (; i < proposedSize; i++) {\\n      IErc20Adapter adapter = proposedAdapters[i];\\n      params.adapters[i] = adapter;\\n      uint256 weight = proposedWeights[i];\\n      params.weights[i] = weight;\\n      uint256 targetBalance = totalProductiveBalance.mulFractionE18(weight);\\n      uint256 _balance = adapter.balanceUnderlying();\\n      params.balances[i] = _balance;\\n      int256 liquidityDelta = targetBalance.toInt256().sub(_balance.toInt256());\\n      netAPR = netAPR.add(\\n        adapter.getHypotheticalAPR(liquidityDelta).mulFractionE18(weight)\\n      );\\n      params.liquidityDeltas[i] = liquidityDelta;\\n    }\\n    netAPR = netAPR.mulSubFractionE18(reserveRatio);\\n    RebalanceValidation.validateSufficientImprovement(currentParams.netAPR, netAPR, minimumAPRImprovement);\\n    for (; i < expandedSize; i++) {\\n      // i - proposedSize = index in excluded adapter indices array\\n      // The value in excludedAdapterIndices is the index in the current adapters array\\n      // for the adapter which is being removed.\\n      // The lending markets for these adapters may or may not have sufficient liquidity to\\n      // process a full withdrawal requested by the vault, so we keep those adapters in the\\n      // adapters list, but set a weight of 0 and a liquidity delta of -balance\\n      uint256 rI = excludedAdapterIndices[i - proposedSize];\\n      params.adapters[i] = currentParams.adapters[rI];\\n      params.weights[i] = 0;\\n      uint256 _balance = currentParams.balances[rI];\\n      params.balances[i] = _balance;\\n      params.liquidityDeltas[i] = -_balance.toInt256();\\n    }\\n  }\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external override onlyEOA changesComposition {\\n    RebalanceValidation.validateAdaptersAndWeights(registry, underlying, proposedAdapters, proposedWeights);\\n    (\\n      DistributionParameters memory currentParams,\\n      uint256 totalProductiveBalance,\\n      uint256 _reserveBalance\\n    ) = currentDistribution();\\n    DistributionParameters memory proposedParams = processProposedDistribution(\\n      currentParams,\\n      totalProductiveBalance,\\n      proposedAdapters,\\n      proposedWeights\\n    );\\n    beforeAddAdapters(proposedParams.adapters);\\n    uint256[] memory removedIndices = AdapterHelper.rebalance(\\n      proposedParams.adapters,\\n      proposedParams.weights,\\n      proposedParams.liquidityDeltas,\\n      _reserveBalance\\n    );\\n    uint256 removedLen = removedIndices.length;\\n    if (removedLen > 0) {\\n      // The indices to remove are necessarily in ascending order, so as long as we remove\\n      // them in reverse, the removal of elements will not break the other indices.\\n      for (uint256 i = removedLen; i > 0; i--) {\\n        uint256 rI = removedIndices[i-1];\\n        emit AdapterRemoved(proposedParams.adapters[rI]);\\n        proposedParams.adapters.mremove(rI);\\n        proposedParams.weights.mremove(rI);\\n      }\\n    }\\n    setAdaptersAndWeights(proposedParams.adapters, proposedParams.weights);\\n  }\\n\\n  function _transferOut(address to, uint256 amount) internal {\\n    underlying.safeTransfer(to, amount);\\n  }\\n}\",\"keccak256\":\"0x60178347588a6aa9ced4278c311d735a5c29e053050df83cfb75f6eb8ee1a49f\",\"license\":\"MIT\"},\"contracts/vaults/NirnVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../OwnableProxyImplementation.sol\\\";\\nimport \\\"../interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"../interfaces/IRewardsSeller.sol\\\";\\nimport \\\"../interfaces/INirnVault.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../libraries/SymbolHelper.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\nimport \\\"../libraries/AdapterHelper.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n\\n/**\\n * @dev Base contract defining the constant and storage variables\\n * for NirnVault, as well as basic state queries and setters.\\n */\\nabstract contract NirnVaultBase is ERC20, OwnableProxyImplementation(), INirnVault {\\n  using SafeCast for uint256;\\n  using TransferHelper for address;\\n  using Fraction for uint256;\\n  using LowGasSafeMath for uint256;\\n  using MinimalSignedMath for uint256;\\n  using MinimalSignedMath for int256;\\n  using ArrayHelper for uint256[];\\n  using ArrayHelper for address[];\\n  using ArrayHelper for bytes32[];\\n  using ArrayHelper for IErc20Adapter[];\\n  using AdapterHelper for bytes32;\\n  using AdapterHelper for bytes32[];\\n  using AdapterHelper for IErc20Adapter[];\\n\\n/* ========== Constants ========== */\\n\\n  /**\\n  * @dev Fraction of the current APR of the vault that a proposed rebalance must improve\\n  * the net APR by to be accepted, as a fraction of 1e18.\\n  * 5e16 means newAPR-currentAPR must be greater than or equal to currentAPR*1.05\\n  */\\n  uint256 public constant override minimumAPRImprovement = 5e16;\\n\\n  uint256 public constant override minimumCompositionChangeDelay = 1 hours;\\n\\n  /** @dev Nirn adapter registry */\\n  IAdapterRegistry public immutable override registry;\\n\\n  /** @dev Address of a contract which can only execute specific functions and only allows EOAs to call. */\\n  address public immutable override eoaSafeCaller;\\n\\n/* ========== Storage ========== */\\n\\n  /** @dev Underlying asset for the vault. */\\n  address public override underlying;\\n\\n  /** @dev Time at which a changing rebalance can be executed. */\\n  uint96 public override canChangeCompositionAfter;\\n\\n  /** @dev ERC20 name */\\n  string public override name;\\n\\n  /** @dev ERC20 symbol */\\n  string public override symbol;\\n\\n  /** @dev Tokens which can not be sold - wrapper tokens used by the adapters. */\\n  mapping(address => bool) public override lockedTokens;\\n\\n  /** @dev Account that receives performance fees. */\\n  address public override feeRecipient;\\n\\n  /** @dev Address of contract used to sell rewards. */\\n  IRewardsSeller public override rewardsSeller;\\n\\n  /**\\n   * @dev Maximum underlying balance that can be deposited.\\n   * If zero, no maximum.\\n   */\\n  uint256 public override maximumUnderlying;\\n\\n  /** @dev Fee taken on profit as a fraction of 1e18. */\\n  uint64 public override performanceFee;\\n\\n  /** @dev Ratio of underlying token to keep in the vault for cheap withdrawals as a fraction of 1e18. */\\n  uint64 public override reserveRatio;\\n\\n  /** @dev Last price at which fees were taken. */\\n  uint128 public override priceAtLastFee;\\n\\n  /** @dev Tightly packed token adapters encoded as (address,uint96). */\\n  bytes32[] internal packedAdaptersAndWeights;\\n\\n  /** @dev ERC20 decimals */\\n  function decimals() external view override returns (uint8) {\\n    try IERC20Metadata(underlying).decimals() returns (uint8 _decimals) {\\n      return _decimals;\\n    } catch {\\n      return 18;\\n    }\\n  }\\n\\n  function getAdaptersAndWeights() public view override returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  ) {\\n    (adapters, weights) = packedAdaptersAndWeights.unpackAdaptersAndWeights();\\n  }\\n\\n  function setAdaptersAndWeights(IErc20Adapter[] memory adapters, uint256[] memory weights) internal {\\n    emit AllocationsUpdated(adapters, weights);\\n    packedAdaptersAndWeights = AdapterHelper.packAdaptersAndWeights(\\n      adapters,\\n      weights\\n    );\\n  }\\n\\n  function removeAdapters(uint256[] memory removeIndices) internal {\\n    uint256 len = removeIndices.length;\\n    if (len == 0) return;\\n    for (uint256 i = len; i > 0; i--) {\\n      uint256 rI = removeIndices[i - 1];\\n      (IErc20Adapter adapter,) = packedAdaptersAndWeights[rI].unpackAdapterAndWeight();\\n      emit AdapterRemoved(adapter);\\n      packedAdaptersAndWeights.remove(rI);\\n    }\\n  }\\n\\n/* ========== Modifiers ========== */\\n\\n  /**\\n   * @dev Prevents calls from arbitrary contracts.\\n   * Caller must be an EOA account or a pre-approved \\\"EOA-safe\\\" caller,\\n   * meaning a smart contract which can only be called by an EOA and has\\n   * a limited set of functions it can call.\\n   * This prevents griefing via flash loans that force the vault to use\\n   * adapters with low interest rates.\\n   */\\n  modifier onlyEOA {\\n    require(msg.sender == tx.origin || msg.sender == eoaSafeCaller, \\\"!EOA\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Prevents composition-changing rebalances from being executed more\\n   * frequently than the configured minimum delay;\\n   */\\n  modifier changesComposition {\\n    require(block.timestamp >= canChangeCompositionAfter, \\\"too soon\\\");\\n    canChangeCompositionAfter = block.timestamp.add(minimumCompositionChangeDelay).toUint96();\\n    _;\\n  }\\n\\n/* ========== Constructor ========== */\\n\\n  constructor(address _registry, address _eoaSafeCaller) {\\n    registry = IAdapterRegistry(_registry);\\n    eoaSafeCaller = _eoaSafeCaller;\\n  }\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external override initializer(_owner) {\\n    require(_feeRecipient != address(0), \\\"null address\\\");\\n    underlying = _underlying;\\n    feeRecipient = _feeRecipient;\\n    rewardsSeller = IRewardsSeller(_rewardsSeller);\\n\\n    (address adapter,) = registry.getAdapterWithHighestAPR(_underlying);\\n    packedAdaptersAndWeights.push(AdapterHelper.packAdapterAndWeight(IErc20Adapter(adapter), 1e18));\\n    beforeAddAdapter(IErc20Adapter(adapter));\\n\\n    name = SymbolHelper.getPrefixedName(\\\"Indexed \\\", _underlying);\\n    symbol = SymbolHelper.getPrefixedSymbol(\\\"n\\\", _underlying);\\n    performanceFee = 1e17;\\n    reserveRatio = 1e17;\\n    priceAtLastFee = 1e18;\\n  }\\n\\n/* ========== Configuration Controls ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external override onlyOwner {\\n    maximumUnderlying = _maximumUnderlying;\\n    emit SetMaximumUnderlying(_maximumUnderlying);\\n  }\\n\\n  function setPerformanceFee(uint64 _performanceFee) external override onlyOwner {\\n    claimFees(balance(), totalSupply);\\n    require(_performanceFee <= 2e17, \\\"fee > 20%\\\");\\n    performanceFee = _performanceFee;\\n    emit SetPerformanceFee(_performanceFee);\\n  }\\n\\n  function setReserveRatio(uint64 _reserveRatio) external override onlyOwner {\\n    require(_reserveRatio <= 2e17, \\\"reserve > 20%\\\");\\n    reserveRatio = _reserveRatio;\\n    emit SetReserveRatio(_reserveRatio);\\n  }\\n\\n  function setFeeRecipient(address _feeRecipient) external override onlyOwner {\\n    require(_feeRecipient != address(0), \\\"null address\\\");\\n    feeRecipient = _feeRecipient;\\n    emit SetFeeRecipient(_feeRecipient);\\n  }\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external override onlyOwner {\\n    rewardsSeller = _rewardsSeller;\\n    emit SetRewardsSeller(address(_rewardsSeller));\\n  }\\n\\n/* ========== Reward Token Sale ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external override onlyEOA {\\n    uint256 _balance = IERC20(rewardsToken).balanceOf(address(this));\\n    require(!lockedTokens[rewardsToken] && rewardsToken != underlying, \\\"token locked\\\");\\n    IRewardsSeller _rewardsSeller = rewardsSeller;\\n    require(address(_rewardsSeller) != address(0), \\\"null seller\\\");\\n    rewardsToken.safeTransfer(address(_rewardsSeller), _balance);\\n    _rewardsSeller.sellRewards(msg.sender, rewardsToken, underlying, params);\\n  }\\n\\n  function withdrawFromUnusedAdapter(IErc20Adapter adapter) external {\\n    (IErc20Adapter[] memory adapters,) = getAdaptersAndWeights();\\n    require(\\n      !adapters.toAddressArray().includes(address(adapter)),\\n      \\\"!unused\\\"\\n    );\\n    require(registry.isApprovedAdapter(address(adapter)), \\\"!approved\\\");\\n    address wrapper = adapter.token();\\n    wrapper.safeApproveMax(address(adapter));\\n    uint256 bal = adapter.balanceUnderlying();\\n    adapter.withdrawUnderlyingUpTo(bal);\\n    wrapper.safeUnapprove(address(adapter));\\n  }\\n\\n/* ========== Underlying Balance Queries ========== */\\n\\n  struct BalanceSheet {\\n    uint256[] balances;\\n    uint256 reserveBalance;\\n    uint256 totalBalance;\\n    uint256 totalProductiveBalance;\\n  }\\n\\n  function getBalanceSheet(\\n    IErc20Adapter[] memory adapters\\n  ) internal view returns (BalanceSheet memory sheet) {\\n    sheet.balances = adapters.getBalances();\\n    sheet.reserveBalance = reserveBalance();\\n    sheet.totalBalance = sheet.balances.sum().add(sheet.reserveBalance);\\n    sheet.totalProductiveBalance = sheet.totalBalance.mulSubFractionE18(reserveRatio);\\n  }\\n\\n  /**\\n   * @dev Returns the value in `underlying` of the vault's deposits\\n   * in each adapter.\\n   */\\n  function getBalances() public view override returns (uint256[] memory balances) {\\n    (IErc20Adapter[] memory adapters,) = getAdaptersAndWeights();\\n    return adapters.getBalances();\\n  }\\n\\n  /**\\n   * @dev Returns total value of vault in `underlying`\\n   */\\n  function balance() public view override returns (uint256 sum) {\\n    (IErc20Adapter[] memory adapters,) = getAdaptersAndWeights();\\n    uint256 len = adapters.length;\\n    for (uint256 i; i < len; i++) {\\n      sum = sum.add(adapters[i].balanceUnderlying());\\n    }\\n    sum = sum.add(reserveBalance());\\n  }\\n\\n  /**\\n   * @dev Returns current \\\"reserve\\\" balance, or balance of `underlying` held by the vault\\n   */\\n  function reserveBalance() public view override returns (uint256) {\\n    return IERC20(underlying).balanceOf(address(this));\\n  }\\n\\n/* ========== Fees ========== */\\n\\n  function calculateFee(uint256 totalBalance, uint256 supply) internal view returns (uint256) {\\n    uint256 valueAtLastCollectionPrice = supply.mulFractionE18(priceAtLastFee);\\n    if (totalBalance <= valueAtLastCollectionPrice) return 0;\\n    uint256 profit = totalBalance.sub(valueAtLastCollectionPrice);\\n    return profit.mulFractionE18(performanceFee);\\n  }\\n\\n  function getPendingFees() external view override returns (uint256) {\\n    return calculateFee(balance(), totalSupply);\\n  }\\n\\n  function claimFees(uint256 totalBalance, uint256 supply) internal returns (uint256 newSupply) {\\n    uint256 totalFees = calculateFee(totalBalance, supply);\\n    if (totalFees == 0) return supply;\\n    uint256 equivalentShares = totalFees.mul(supply) / totalBalance.sub(totalFees);\\n    emit FeesClaimed(totalFees, equivalentShares);\\n    _mint(feeRecipient, equivalentShares);\\n    newSupply = supply.add(equivalentShares);\\n    priceAtLastFee = totalBalance.toFractionE18(newSupply).toUint128();\\n  }\\n\\n  function claimFees() external {\\n    claimFees(balance(), totalSupply);\\n  }\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view override returns (uint256) {\\n    return balance().toFractionE18(totalSupply);\\n  }\\n\\n  function getPricePerFullShareWithFee() public view override returns (uint256) {\\n    uint256 totalBalance = balance();\\n    uint256 supply = totalSupply;\\n    uint256 pendingFees = calculateFee(totalBalance, supply);\\n    if (pendingFees > 0) {\\n      uint256 equivalentShares = pendingFees.mul(supply) / totalBalance.sub(pendingFees);\\n      supply = supply.add(equivalentShares);\\n    }\\n    return totalBalance.toFractionE18(supply);\\n  }\\n\\n/* ========== Update Hooks ========== */\\n\\n  function beforeAddAdapter(IErc20Adapter adapter) internal {\\n    address wrapper = adapter.token();\\n    if (IERC20(wrapper).allowance(address(this), address(adapter)) > 0) return;\\n    lockedTokens[wrapper] = true;\\n    underlying.safeApproveMax(address(adapter));\\n    wrapper.safeApproveMax(address(adapter));\\n  }\\n\\n  function beforeAddAdapters(IErc20Adapter[] memory adapters) internal {\\n    uint256 len = adapters.length;\\n    for (uint256 i; i < len; i++) beforeAddAdapter(adapters[i]);\\n  }\\n}\",\"keccak256\":\"0x1cbca63c92fd64e96a8c16f827179f57d17532f8242f6af793555fbb1a527215\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200595d3803806200595d8339810160408190526200003491620000b8565b600380546001600160a01b0319166001908117909155604051839183916000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606092831b8116608052911b1660a05250620000ef9050565b80516001600160a01b0381168114620000b357600080fd5b919050565b60008060408385031215620000cb578182fd5b620000d6836200009b565b9150620000e6602084016200009b565b90509250929050565b60805160601c60a05160601c6158216200013c600039806106cf52806109be5280610a5d52806113fb5280611c4b5250806113c552806115685280611d0a528061209052506158216000f3fe608060405234801561001057600080fd5b50600436106103555760003560e01c806370aff70f116101c8578063a10954fe11610104578063c89d5b8b116100a2578063e74b981b1161007c578063e74b981b14610650578063eab2272014610663578063f2fde38b14610676578063f8c8765e1461068957610355565b8063c89d5b8b1461062d578063d294f09314610635578063dd62ed3e1461063d57610355565b8063a9059cbb116100de578063a9059cbb146105f7578063b69ef8a81461060a578063b6b55f2514610612578063c51c2d0e1461062557610355565b8063a10954fe146105c9578063a457c2d7146105d1578063a8d03072146105e457610355565b806387788782116101715780638ee56a1b1161014b5780638ee56a1b146105855780638fdef66b1461059857806395d89b41146105ab5780639924f676146105b357610355565b8063877887821461056d5780638da5cb5b146105755780638ec25fcd1461057d57610355565b80637b103999116101a25780637b103999146105555780637d7c2a1c1461055d5780637fd498661461056557610355565b806370aff70f14610532578063715018a61461054557806377c7b8fc1461054d57610355565b8063308e808f116102975780634690484011610240578063553740481161021a57806355374048146104fc5780635eb7413a146105045780636f307dc31461051757806370a082311461051f57610355565b806346904840146104c857806348ced6a7146104d057806353797180146104e757610355565b80633cf99a46116102715780633cf99a46146104a55780634093e192146104b85780634445fd21146104c057610355565b8063308e808f1461046a578063313ce5671461047d578063395093511461049257610355565b806318160ddd1161030457806327f9b53f116102de57806327f9b53f146104275780632d8a9eaa1461043a5780632e1a7d4d146104425780632f0ae2ae1461045557610355565b806318160ddd146103f757806320b04963146103ff57806323b872dd1461041457610355565b8063095ea7b311610335578063095ea7b3146103a25780630c7d5cd8146103c25780631071a290146103d757610355565b8062113e081461035a578062e00ebb1461037857806306fdde031461038d575b600080fd5b61036261069c565b60405161036f91906152ad565b60405180910390f35b61038b610386366004614ee9565b6106bb565b005b610395610898565b60405161036f91906152d4565b6103b56103b0366004614f69565b610926565b60405161036f91906152c0565b6103ca61093d565b60405161036f919061560f565b6103ea6103e53660046150f8565b610954565b60405161036f91906152cb565b6103ea6109b6565b6104076109bc565b60405161036f9190615207565b6103b5610422366004614ea9565b6109e0565b61038b61043536600461502a565b610a49565b6103ea610c49565b6103ea6104503660046150f8565b610c4f565b61045d610cb0565b60405161036f91906155ed565b61038b61047836600461514c565b610cc6565b610485610da6565b60405161036f9190615624565b6103b56104a0366004614f69565b610e39565b61038b6104b336600461514c565b610e6f565b610407610f4a565b6103ea610f59565b610407610f5f565b6104d8610f6e565b60405161036f93929190615557565b6104ef61118b565b60405161036f9190615632565b6103ea6111a1565b6103b5610512366004614dde565b611206565b61040761121b565b6103ea61052d366004614dde565b61122a565b6103ea610540366004615128565b61123c565b61038b611312565b6103ea6113a8565b6104076113c3565b61038b6113e7565b6103626114b9565b6103ca6114ea565b6104076114fa565b6103ea611509565b61038b610593366004614dde565b611514565b61038b6105a6366004614dde565b61179f565b610395611832565b6105bb61188d565b60405161036f929190615288565b6103ea6118f2565b6103b56105df366004614f69565b611974565b61038b6105f23660046150f8565b6119c3565b6103b5610605366004614f69565b611a40565b6103ea611a4d565b6103ea6106203660046150f8565b611b1b565b6103ea611b27565b6103ea611b3c565b61038b611b53565b6103ea61064b366004614e16565b611b61565b61038b61065e366004614dde565b611b7e565b61038b610671366004614fc1565b611c37565b61038b610684366004614dde565b611e8b565b61038b610697366004614e4e565b611f74565b606060006106a861188d565b5090506106b481612243565b9150505b90565b333214806106f15750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6107165760405162461bcd60e51b815260040161070d9061545d565b60405180910390fd5b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610745903090600401615207565b60206040518083038186803b15801561075d57600080fd5b505afa158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190615110565b6001600160a01b03851660009081526007602052604090205490915060ff161580156107cf57506004546001600160a01b03858116911614155b6107eb5760405162461bcd60e51b815260040161070d90615327565b6009546001600160a01b0316806108145760405162461bcd60e51b815260040161070d90615520565b6108286001600160a01b0386168284612337565b60048054604051620abdf360ec1b81526001600160a01b038085169363abdf30009361085f9333938c939216918b918b910161521b565b600060405180830381600087803b15801561087957600080fd5b505af115801561088d573d6000803e3d6000fd5b505050505050505050565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561091e5780601f106108f35761010080835404028352916020019161091e565b820191906000526020600020905b81548152906001019060200180831161090157829003601f168201915b505050505081565b60006109333384846124a0565b5060015b92915050565b600b54600160401b900467ffffffffffffffff1681565b600080600061096161188d565b9150915060006109708361258c565b9050600061098482604001516002546125ed565b604083015190915061099687836126bc565b8161099d57fe5b0494506109ad85878686866126e4565b50505050919050565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006109ed84848461277d565b610a3f8433610a3a8560405180606001604052806028815260200161573a602891396001600160a01b038a16600090815260016020908152604080832033845290915290205491906128cd565b6124a0565b5060019392505050565b33321480610a7f5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b610a9b5760405162461bcd60e51b815260040161070d9061545d565b600454600160a01b90046001600160601b0316421015610acd5760405162461bcd60e51b815260040161070d90615395565b610ae1610adc42610e10612964565b612974565b600460146101000a8154816001600160601b0302191690836001600160601b031602179055506000806000610b14610f6e565b925092509250610b2883602001518561298f565b6000610b3983856040015187612b21565b600b548551919250600091610b6b91600160401b900467ffffffffffffffff1690610b65908986612be3565b90612cc2565b9050610b8385608001518266b1a2bc2ec50000612cf1565b6000610b958660000151888587612d98565b80519091508015610c3357805b8015610c31576000836001830381518110610bb957fe5b602002602001015190507fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d89600001518281518110610bf457fe5b6020026020010151604051610c099190615207565b60405180910390a18851610c1d908261303b565b610c278a8261309c565b5060001901610ba2565b505b8651610c3f90896130e8565b5050505050505050565b600a5481565b6000806000610c5c61188d565b915091506000610c6b8361258c565b90506000610c7f82604001516002546125ed565b905080610c998360400151886126bc90919063ffffffff16565b81610ca057fe5b0494506109ad86868686866126e4565b600b54600160801b90046001600160801b031681565b6003546001600160a01b03163314610d0e576040805162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b604482015290519081900360640190fd5b6702c68af0bb1400008167ffffffffffffffff161115610d405760405162461bcd60e51b815260040161070d906154e9565b600b80546fffffffffffffffff00000000000000001916600160401b67ffffffffffffffff8416021790556040517f53010711698e5dbf2a05de8cd22b034a7c0972d110c1fd3fa95ee2eefc88ae9b90610d9b90839061560f565b60405180910390a150565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610df657600080fd5b505afa925050508015610e26575060408051601f3d908101601f19168201909252610e2391810190615174565b60015b610e32575060126106b8565b90506106b8565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610933918590610a3a9086612964565b6003546001600160a01b03163314610eb7576040805162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b604482015290519081900360640190fd5b610eca610ec2611a4d565b6002546125ed565b506702c68af0bb1400008167ffffffffffffffff161115610efd5760405162461bcd60e51b815260040161070d906154b2565b600b805467ffffffffffffffff191667ffffffffffffffff83161790556040517f8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd7090610d9b90839061560f565b6009546001600160a01b031681565b610e1081565b6008546001600160a01b031681565b610f76614c67565b600b546000908190600160401b900467ffffffffffffffff16610f9761188d565b6020860152808552805190600090610fae90612243565b6040870152610fbb6118f2565b9350610fd883610b6586610fd28a6040015161313f565b90612964565b94508167ffffffffffffffff81118015610ff157600080fd5b5060405190808252806020026020018201604052801561101b578160200160208202803683370190505b50606087015260005b8281101561116f5760008760000151828151811061103e57fe5b6020026020010151905060008860200151838151811061105a57fe5b602002602001015190506000611079828a61317e90919063ffffffff16565b905060006110af6110a08c60400151878151811061109357fe5b60200260200101516131a2565b6110a9846131a2565b906131b8565b905061114161113a84866001600160a01b031663d31c9c29856040518263ffffffff1660e01b81526004016110e491906152cb565b60206040518083038186803b1580156110fc57600080fd5b505afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190615110565b9061317e565b8790612964565b9550808b60600151868151811061115457fe5b60209081029190910101525050600190920191506110249050565b5061117a8184612cc2565b866080018181525050505050909192565b600454600160a01b90046001600160601b031681565b6000806111ac611a4d565b60025490915060006111be838361321d565b905080156111f45760006111d28483613283565b6111dc83856126bc565b816111e357fe5b0490506111f08382612964565b9250505b6111fe8383613298565b935050505090565b60076020526000908152604090205460ff1681565b6004546001600160a01b031681565b60006020819052908152604090205481565b600080611247611a4d565b600a54909150801561127c578061125e8387612964565b111561127c5760405162461bcd60e51b815260040161070d90615426565b600454611294906001600160a01b03163330886132ad565b60006112a2836002546125ed565b905080156112c257826112b587836126bc565b816112bc57fe5b046112c4565b855b93506112d08585613417565b7fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c558487604051611301929190615601565b60405180910390a150505092915050565b6003546001600160a01b0316331461135a576040805162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b604482015290519081900360640190fd5b6003546040516001916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001179055565b60006113be6002546113b8611a4d565b90613298565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b3332148061141d5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6114395760405162461bcd60e51b815260040161070d9061545d565b60008061144461188d565b9150915060006114538361258c565b9050600061146a8260600151836000015185612b21565b9050600061147e8585848660200151612d98565b9050611489816134fb565b6040517fc741dbaad15a4f298fe8d80943fa8e005e7bcb2f5b0a0c8dec1fc35be457f14690600090a15050505050565b60606000806114c661188d565b9150915060006114d58361258c565b90506111fe8160600151826000015184612b21565b600b5467ffffffffffffffff1681565b6003546001600160a01b031690565b66b1a2bc2ec5000081565b600061151e61188d565b5090506115348261152e836106b8565b9061359d565b156115515760405162461bcd60e51b815260040161070d9061547b565b604051635c871a6d60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b90e34da9061159d908590600401615207565b60206040518083038186803b1580156115b557600080fd5b505afa1580156115c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ed91906150d8565b6116095760405162461bcd60e51b815260040161070d90615403565b6000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c9190614dfa565b90506116916001600160a01b038216846135f7565b6000836001600160a01b0316638da876c96040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190615110565b6040516365cdab3d60e01b81529091506001600160a01b038516906365cdab3d906117339084906004016152cb565b602060405180830381600087803b15801561174d57600080fd5b505af1158015611761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117859190615110565b506117996001600160a01b03831685613608565b50505050565b6003546001600160a01b031633146117e7576040805162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b604482015290519081900360640190fd5b600980546001600160a01b0319166001600160a01b0383161790556040517fee06a859fd4aedc2e68c8119f2254bea4f299651fec98981b7c50abff31cc56a90610d9b908390615207565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561091e5780601f106108f35761010080835404028352916020019161091e565b6060806118e9600c8054806020026020016040519081016040528092919081815260200182805480156118df57602002820191906000526020600020905b8154815260200190600101908083116118cb575b5050505050613614565b90939092509050565b600480546040516370a0823160e01b81526000926001600160a01b03909216916370a082319161192491309101615207565b60206040518083038186803b15801561193c57600080fd5b505afa158015611950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be9190615110565b60006109333384610a3a856040518060600160405280602581526020016157f0602591393360009081526001602090815260408083206001600160a01b038d16845290915290205491906128cd565b6003546001600160a01b03163314611a0b576040805162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b604482015290519081900360640190fd5b600a8190556040517f02ac753a97ca3ffbf19206e2570b76604426f10a4cf799aa535a21b1406d653290610d9b9083906152cb565b600061093333848461277d565b600080611a5861188d565b50805190915060005b81811015611b0157611af7838281518110611a7857fe5b60200260200101516001600160a01b0316638da876c96040518163ffffffff1660e01b815260040160206040518083038186803b158015611ab857600080fd5b505afa158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af09190615110565b8590612964565b9350600101611a61565b50611b14611b0d6118f2565b8490612964565b9250505090565b6000610937823361123c565b60006113be611b34611a4d565b60025461321d565b600080611b47610f6e565b50506080015191505090565b611b5e610ec2611a4d565b50565b600160209081526000928352604080842090915290825290205481565b6003546001600160a01b03163314611bc6576040805162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b604482015290519081900360640190fd5b6001600160a01b038116611bec5760405162461bcd60e51b815260040161070d906153cc565b600880546001600160a01b0319166001600160a01b0383161790556040517f2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a7390610d9b908390615207565b33321480611c6d5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b611c895760405162461bcd60e51b815260040161070d9061545d565b600454600160a01b90046001600160601b0316421015611cbb5760405162461bcd60e51b815260040161070d90615395565b611cca610adc42610e10612964565b600480546001600160601b0392909216600160a01b026001600160a01b0392831617908190556040805160208088028281018201909352878252611d7e947f000000000000000000000000000000000000000000000000000000000000000094169289918991829185019084908082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061373292505050565b6000806000611d8b610f6e565b9250925092506000611da184848a8a8a8a613a7b565b9050611db08160000151613ed1565b6000611dca82600001518360200151846060015186612d98565b80519091508015611e6d57805b8015611e6b576000836001830381518110611dee57fe5b602002602001015190507fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d85600001518281518110611e2957fe5b6020026020010151604051611e3e9190615207565b60405180910390a18451611e52908261303b565b6020850151611e61908261309c565b5060001901611dd7565b505b611e7f836000015184602001516130e8565b50505050505050505050565b6003546001600160a01b03163314611ed3576040805162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b604482015290519081900360640190fd5b6001600160a01b038116611f185760405162461bcd60e51b81526004018080602001828103825260268152602001806156a16026913960400191505060405180910390fd5b6003546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b60035481906001600160a01b031615611fd4576040805162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b0383166120435760405162461bcd60e51b815260040161070d906153cc565b600480546001600160a01b038088166001600160a01b03199283161783556008805487831690841617905560098054888316931692909217909155604051636b776e2f60e01b81526000927f000000000000000000000000000000000000000000000000000000000000000090921691636b776e2f916120c5918a9101615207565b604080518083038186803b1580156120dc57600080fd5b505afa1580156120f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121149190614f94565b509050600c61212b82670de0b6b3a7640000613f02565b8154600181018355600092835260209092209091015561214a81613f0c565b6121896040518060400160405280600881526020017f496e64657865642000000000000000000000000000000000000000000000000081525087614052565b805161219d91600591602090910190614c96565b506121c1604051806040016040528060018152602001603760f91b81525087614115565b80516121d591600691602090910190614c96565b5050600b805467016345785d8a000067ffffffffffffffff19909116176fffffffffffffffff000000000000000019166f016345785d8a00000000000000000000176001600160801b0316770de0b6b3a7640000000000000000000000000000000000001790555050505050565b80516060908067ffffffffffffffff8111801561225f57600080fd5b50604051908082528060200260200182016040528015612289578160200160208202803683370190505b50915060005b81811015612330578381815181106122a357fe5b60200260200101516001600160a01b0316638da876c96040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e357600080fd5b505afa1580156122f7573d6000803e3d6000fd5b505050506040513d602081101561230d57600080fd5b5051835184908390811061231d57fe5b602090810291909101015260010161228f565b5050919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b602083106123b35780518252601f199092019160209182019101612394565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612415576040519150601f19603f3d011682016040523d82523d6000602084013e61241a565b606091505b5091509150818015612448575080511580612448575080806020019051602081101561244557600080fd5b50515b612499576040805162461bcd60e51b815260206004820152600560248201527f54483a5354000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b6001600160a01b0383166124e55760405162461bcd60e51b81526004018080602001828103825260248152602001806157a86024913960400191505060405180910390fd5b6001600160a01b03821661252a5760405162461bcd60e51b81526004018080602001828103825260228152602001806156c76022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b612594614d1e565b61259d82612243565b81526125a76118f2565b6020820181905281516125be9190610fd29061313f565b60408201819052600b546125e39190600160401b900467ffffffffffffffff16612cc2565b6060820152919050565b6000806125fa848461321d565b90508061260a5782915050610937565b60006126168583613283565b61262083866126bc565b8161262757fe5b0490507fa1f87f32d0f17fab0242ca800d736293de8988c14b27747e218cf13d5c249f53828260405161265b929190615601565b60405180910390a1600854612679906001600160a01b031682613417565b6126838482612964565b92506126976126928685613298565b614121565b600b80546001600160801b03928316600160801b029216919091179055505092915050565b6000826126cb57506000610937565b50818102818382816126d957fe5b041461093757600080fd5b6126ee3386614137565b7fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93858560405161271f929190615601565b60405180910390a1600b54604082015160009161275391600160401b90910467ffffffffffffffff16906111349088613283565b905061276b8484846000015185602001518986614227565b61277533866143be565b505050505050565b6001600160a01b0383166127c25760405162461bcd60e51b81526004018080602001828103825260258152602001806157836025913960400191505060405180910390fd5b6001600160a01b0382166128075760405162461bcd60e51b815260040180806020018281038252602381526020018061565c6023913960400191505060405180910390fd5b61284481604051806060016040528060268152602001615714602691396001600160a01b03861660009081526020819052604090205491906128cd565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546128739082612964565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561295c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612921578181015183820152602001612909565b50505050905090810190601f16801561294e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b8082018281101561093757600080fd5b806001600160601b038116811461298a57600080fd5b919050565b8151815181146129d4576040805162461bcd60e51b815260206004820152600b60248201526a626164206c656e6774687360a81b604482015290519081900360640190fd5b6000805b82811015612ad25760008482815181106129ee57fe5b60200260200101519050612a0b818461296490919063ffffffff16565b925080612a7f57858281518110612a1e57fe5b6020026020010151600014612a7a576040805162461bcd60e51b815260206004820152601760248201527f63616e206e6f7420736574206e756c6c20776569676874000000000000000000604482015290519081900360640190fd5b612ac9565b66b1a2bc2ec50000811015612ac9576040805162461bcd60e51b815260206004820152600b60248201526a776569676874203c20352560a81b604482015290519081900360640190fd5b506001016129d8565b5080670de0b6b3a764000014611799576040805162461bcd60e51b815260206004820152600f60248201526e7765696768747320213d203130302560881b604482015290519081900360640190fd5b81516060908067ffffffffffffffff81118015612b3d57600080fd5b50604051908082528060200260200182016040528015612b67578160200160208202803683370190505b50915060005b81811015612bda576000612b9d858381518110612b8657fe5b60200260200101518861317e90919063ffffffff16565b9050612bba612bb187848151811061109357fe5b6110a9836131a2565b848381518110612bc657fe5b602090810291909101015250600101612b6d565b50509392505050565b8251600090815b81811015612bda576000858281518110612c0057fe5b602002602001015190506000811115612cb957612cb6611af082898581518110612c2657fe5b60200260200101516001600160a01b031663d31c9c29898781518110612c4857fe5b60200260200101516040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015612c8457600080fd5b505afa158015612c98573d6000803e3d6000fd5b505050506040513d6020811015612cae57600080fd5b50519061317e565b93505b50600101612bea565b6000612cea670de0b6b3a7640000612cda85856126bc565b81612ce157fe5b85919004613283565b9392505050565b80612d40846113b8866040518060400160405280600a81526020017f21696e6372656173656400000000000000000000000000000000000000000000815250876128cd9092919063ffffffff16565b1015612d93576040805162461bcd60e51b815260206004820152601860248201527f696e73756666696369656e7420696d70726f76656d656e740000000000000000604482015290519081900360640190fd5b505050565b8151606090612da6816143d5565b91508260005b82811015612eba576000868281518110612dc257fe5b602002602001015190506000811215612eb1576000612de382600003614423565b905060008a8481518110612df357fe5b60200260200101516001600160a01b03166365cdab3d836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015612e4057600080fd5b505af1158015612e54573d6000803e3d6000fd5b505050506040513d6020811015612e6a57600080fd5b50518a519091508a9085908110612e7d57fe5b60200260200101516000148015612e9357508181145b15612ea257612ea28785614432565b612eac8582612964565b945050505b50600101612dac565b5060005b82811015613030576000868281518110612ed457fe5b6020026020010151905060008113156130275782612ef25750613030565b6000612efd82614423565b9050838110612f9357898381518110612f1257fe5b60200260200101516001600160a01b031663b6b55f25856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015612f5f57600080fd5b505af1158015612f73573d6000803e3d6000fd5b505050506040513d6020811015612f8957600080fd5b5061303092505050565b898381518110612f9f57fe5b60200260200101516001600160a01b031663b6b55f25826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015612fec57600080fd5b505af1158015613000573d6000803e3d6000fd5b505050506040513d602081101561301657600080fd5b5061302390508482613283565b9350505b50600101612ebe565b505050949350505050565b81516000198101821461309257600083600183038151811061305957fe5b602002602001015190508084848151811061307057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050505b6000190190915250565b8151600019810182146130925760008360018303815181106130ba57fe5b60200260200101519050808484815181106130d157fe5b602002602001018181525050506000190190915250565b7f73c546126c338d7dc5eafc3f4fe287634924e6af696ca7712706f750a9b8be9b8282604051613119929190615288565b60405180910390a161312b8282614447565b8051612d9391600c91602090910190614d46565b8051600090815b818110156123305761317484828151811061315d57fe5b60200260200101518461296490919063ffffffff16565b9250600101613146565b6000670de0b6b3a764000061319384846126bc565b8161319a57fe5b049392505050565b6000600160ff1b82106131b457600080fd5b5090565b60008183038183128015906131cd5750838113155b806131e257506000831280156131e257508381135b612cea5760405162461bcd60e51b81526004018080602001828103825260248152602001806157cc6024913960400191505060405180910390fd5b600b546000908190613240908490600160801b90046001600160801b031661317e565b9050808411613253576000915050610937565b600061325f8583613283565b600b5490915061327a90829067ffffffffffffffff1661317e565b95945050505050565b60008282111561329257600080fd5b50900390565b60008161319384670de0b6b3a76400006126bc565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b602083106133315780518252601f199092019160209182019101613312565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613393576040519150601f19603f3d011682016040523d82523d6000602084013e613398565b606091505b50915091508180156133c65750805115806133c657508080602001905160208110156133c357600080fd5b50515b612775576040805162461bcd60e51b815260206004820152600660248201527f54483a5354460000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216613472576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b60025461347f9082612964565b6002556001600160a01b0382166000908152602081905260409020546134a59082612964565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b8051806135085750611b5e565b805b8015612d9357600083600183038151811061352157fe5b60200260200101519050600061354d600c838154811061353d57fe5b9060005260206000200154614500565b5090507fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d8160405161357f9190615207565b60405180910390a1613592600c83614514565b50506000190161350a565b8151600090815b818110156135ec57836001600160a01b03168582815181106135c257fe5b60200260200101516001600160a01b031614156135e457600192505050610937565b6001016135a4565b506000949350505050565b61360482826000196145a7565b5050565b613604828260006145a7565b805160609081908067ffffffffffffffff8111801561363257600080fd5b5060405190808252806020026020018201604052801561365c578160200160208202803683370190505b5092508067ffffffffffffffff8111801561367657600080fd5b506040519080825280602002602001820160405280156136a0578160200160208202803683370190505b50915060005b8181101561372b5760008582815181106136bc57fe5b602002602001015190506000808260601c91506001600160601b0383169050818785815181106136e857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508086858151811061371557fe5b60209081029190910101525050506001016136a6565b5050915091565b815181518114613777576040805162461bcd60e51b815260206004820152600b60248201526a626164206c656e6774687360a81b604482015290519081900360640190fd5b6000805b82811015613a2c57600085828151811061379157fe5b60200260200101519050876001600160a01b031663b90e34da826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156137e857600080fd5b505afa1580156137fc573d6000803e3d6000fd5b505050506040513d602081101561381257600080fd5b5051613851576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b866001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561389457600080fd5b505afa1580156138a8573d6000803e3d6000fd5b505050506040513d60208110156138be57600080fd5b50516001600160a01b03161461391b576040805162461bcd60e51b815260206004820152600b60248201527f6261642061646170746572000000000000000000000000000000000000000000604482015290519081900360640190fd5b600182015b848110156139aa5786818151811061393457fe5b60200260200101516001600160a01b0316826001600160a01b031614156139a2576040805162461bcd60e51b815260206004820152601160248201527f6475706c69636174652061646170746572000000000000000000000000000000604482015290519081900360640190fd5b600101613920565b5060008583815181106139b957fe5b602002602001015190506139d6818561296490919063ffffffff16565b935066b1a2bc2ec50000811015613a22576040805162461bcd60e51b815260206004820152600b60248201526a776569676874203c20352560a81b604482015290519081900360640190fd5b505060010161377b565b5080670de0b6b3a764000014612775576040805162461bcd60e51b815260206004820152600f60248201526e7765696768747320213d203130302560881b604482015290519081900360640190fd5b613a83614c67565b6000613ac4868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508b5192915050614709565b8051909150859081018067ffffffffffffffff81118015613ae457600080fd5b50604051908082528060200260200182016040528015613b0e578160200160208202803683370190505b5084528067ffffffffffffffff81118015613b2857600080fd5b50604051908082528060200260200182016040528015613b52578160200160208202803683370190505b5060208501528067ffffffffffffffff81118015613b6f57600080fd5b50604051908082528060200260200182016040528015613b99578160200160208202803683370190505b5060408501528067ffffffffffffffff81118015613bb657600080fd5b50604051908082528060200260200182016040528015613be0578160200160208202803683370190505b5060608501526000805b83821015613d965760008a8a84818110613c0057fe5b9050602002016020810190613c159190614dde565b90508087600001518481518110613c2857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000898985818110613c5657fe5b9050602002013590508088602001518581518110613c7057fe5b60209081029190910101526000613c878e8361317e565b90506000836001600160a01b0316638da876c96040518163ffffffff1660e01b815260040160206040518083038186803b158015613cc457600080fd5b505afa158015613cd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cfc9190615110565b9050808a604001518781518110613d0f57fe5b6020026020010181815250506000613d32613d29836131a2565b6110a9856131a2565b9050613d6761113a85876001600160a01b031663d31c9c29856040518263ffffffff1660e01b81526004016110e491906152cb565b9550808b606001518881518110613d7a57fe5b6020908102919091010152505060019094019350613bea915050565b600b54613db5908290600160401b900467ffffffffffffffff16612cc2565b9050613dcd8c608001518266b1a2bc2ec50000612cf1565b82821015613ec25760008585840381518110613de557fe5b602002602001015190508c600001518181518110613dff57fe5b602002602001015187600001518481518110613e1757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600087602001518481518110613e4957fe5b60200260200101818152505060008d604001518281518110613e6757fe5b602002602001015190508088604001518581518110613e8257fe5b602002602001018181525050613e97816131a2565b60000388606001518581518110613eaa57fe5b60209081029190910101525050600190910190613dcd565b50505050509695505050505050565b805160005b81811015612d9357613efa838281518110613eed57fe5b6020026020010151613f0c565b600101613ed6565b60609190911b1790565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015613f4757600080fd5b505afa158015613f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7f9190614dfa565b90506000816001600160a01b031663dd62ed3e30856040518363ffffffff1660e01b8152600401613fb192919061526e565b60206040518083038186803b158015613fc957600080fd5b505afa158015613fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140019190615110565b111561400d5750611b5e565b6001600160a01b038082166000908152600760205260409020805460ff1916600117905560045461403f9116836135f7565b6136046001600160a01b038216836135f7565b60608261405e836147b4565b6040516020018083805190602001908083835b602083106140905780518252601f199092019160209182019101614071565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106140d85780518252601f1990920191602091820191016140b9565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608261405e83614a11565b806001600160801b038116811461298a57600080fd5b6001600160a01b03821661417c5760405162461bcd60e51b81526004018080602001828103825260218152602001806157626021913960400191505060405180910390fd5b6141b98160405180606001604052806022815260200161567f602291396001600160a01b03851660009081526020819052604090205491906128cd565b6001600160a01b0383166000908152602081905260409020556002546141df9082613283565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b8282111561277557600061423b8385613283565b8551909150600061424b826143d5565b905060005b8281101561439657600088828151811061426657fe5b60200260200101519050806000141561427f575061438e565b600061428b8688612964565b9050600081831161429c578261429e565b815b905060008d85815181106142ae57fe5b60200260200101516001600160a01b03166365cdab3d836040518263ffffffff1660e01b81526004016142e191906152cb565b602060405180830381600087803b1580156142fb57600080fd5b505af115801561430f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143339190615110565b905080881015614344576000614348565b8088035b97508c858151811061435657fe5b6020026020010151600014801561436c57508381145b1561437b5761437b8686614432565b876143895750505050614396565b505050505b600101614250565b5082156143b55760405162461bcd60e51b815260040161070d9061535e565b61088d816134fb565b600454613604906001600160a01b03168383612337565b60608167ffffffffffffffff811180156143ee57600080fd5b50604051908082528060200260200182016040528015614418578160200160208202803683370190505b506000815292915050565b6000808212156131b457600080fd5b81516020808202840101919091526001019052565b81516060908067ffffffffffffffff8111801561446357600080fd5b5060405190808252806020026020018201604052801561448d578160200160208202803683370190505b50915060005b818110156144f85760008582815181106144a957fe5b6020026020010151905060008583815181106144c157fe5b602002602001015190506000818360601b179050808685815181106144e257fe5b6020908102919091010152505050600101614493565b505092915050565b606081901c916001600160601b0390911690565b81546000198101821415614548578280548061452c57fe5b6001900381819060005260206000200160009055905550613604565b600083600183038154811061455957fe5b906000526020600020015490508084848154811061457357fe5b90600052602060002001819055508380548061458b57fe5b6001900381819060005260206000200160009055905550505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b602083106146235780518252601f199092019160209182019101614604565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614685576040519150601f19603f3d011682016040523d82523d6000602084013e61468a565b606091505b50915091508180156146b85750805115806146b857508080602001905160208110156146b557600080fd5b50515b612499576040805162461bcd60e51b815260206004820152600560248201527f54483a5341000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b815181516060919061471a826143d5565b925060005b828110156147ab57600086828151811061473557fe5b6020026020010151905060005b838110156147885786818151811061475657fe5b60200260200101516001600160a01b0316826001600160a01b031614156147805760009150614788565b600101614742565b506001600160a01b038116156147a2576147a28583614432565b5060010161471f565b50505092915050565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b1781529151815160609360009384936001600160a01b03881693919290918291908083835b6020831061481d5780518252601f1990920191602091820191016147fe565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461487d576040519150601f19603f3d011682016040523d82523d6000602084013e614882565b606091505b5091509150816148b557604051806040016040528060078152602001662aa725a727aba760c91b8152509250505061298a565b805160201461498c578080602001905160208110156148d357600080fd5b81019080805160405193929190846401000000008211156148f357600080fd5b90830190602082018581111561490857600080fd5b825164010000000081118282018810171561492257600080fd5b82525081516020918201929091019080838360005b8381101561494f578181015183820152602001614937565b50505050905090810190601f16801561497c5780820380516001836020036101000a031916815260200191505b506040525050509250505061298a565b60008180602001905160208110156149a357600080fd5b50519050806149d657604051806040016040528060078152602001662aa725a727aba760c91b815250935050505061298a565b60006149e182614a79565b60ff03905060008060088306116149f95760006149fc565b60015b60ff1660088304018452509195945050505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b1781529151815160609360009384936001600160a01b03881693919290918291908083836020831061481d5780518252601f1990920191602091820191016147fe565b6000808211614ab95760405162461bcd60e51b815260040180806020018281038252602b8152602001806156e9602b913960400191505060405180910390fd5b7e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff60008390038316810260f881901c9060fd1c60048110614ba55760068110614b505780600614614b29577ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd614b4b565b7ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe5b614ba0565b80600414614b7e577ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616614ba0565b7fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff5b614c4f565b60028110614c015780600214614bdb577ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e614ba0565b7fe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707614c4f565b8015614c2d577fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606614c4f565b7f753a6d1b65325d0c552a4d1345224105391a310b29122104190a1103090201005b60039290921b60f8169190911c60ff16949350505050565b6040518060a0016040528060608152602001606081526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282614ccc5760008555614d12565b82601f10614ce557805160ff1916838001178555614d12565b82800160010185558215614d12579182015b82811115614d12578251825591602001919060010190614cf7565b506131b4929150614d80565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b828054828255906000526020600020908101928215614d125791602002820182811115614d12578251825591602001919060010190614cf7565b5b808211156131b45760008155600101614d81565b60008083601f840112614da6578081fd5b50813567ffffffffffffffff811115614dbd578182fd5b6020830191508360208083028501011115614dd757600080fd5b9250929050565b600060208284031215614def578081fd5b8135612cea81615646565b600060208284031215614e0b578081fd5b8151612cea81615646565b60008060408385031215614e28578081fd5b8235614e3381615646565b91506020830135614e4381615646565b809150509250929050565b60008060008060808587031215614e63578182fd5b8435614e6e81615646565b93506020850135614e7e81615646565b92506040850135614e8e81615646565b91506060850135614e9e81615646565b939692955090935050565b600080600060608486031215614ebd578283fd5b8335614ec881615646565b92506020840135614ed881615646565b929592945050506040919091013590565b600080600060408486031215614efd578283fd5b8335614f0881615646565b9250602084013567ffffffffffffffff80821115614f24578384fd5b818601915086601f830112614f37578384fd5b813581811115614f45578485fd5b876020828501011115614f56578485fd5b6020830194508093505050509250925092565b60008060408385031215614f7b578182fd5b8235614f8681615646565b946020939093013593505050565b60008060408385031215614fa6578182fd5b8251614fb181615646565b6020939093015192949293505050565b60008060008060408587031215614fd6578384fd5b843567ffffffffffffffff80821115614fed578586fd5b614ff988838901614d95565b90965094506020870135915080821115615011578384fd5b5061501e87828801614d95565b95989497509550505050565b6000602080838503121561503c578182fd5b823567ffffffffffffffff80821115615053578384fd5b818501915085601f830112615066578384fd5b81358181111561507257fe5b8381026040518582820101818110858211171561508b57fe5b604052828152858101935084860182860187018a10156150a9578788fd5b8795505b838610156150cb5780358552600195909501949386019386016150ad565b5098975050505050505050565b6000602082840312156150e9578081fd5b81518015158114612cea578182fd5b600060208284031215615109578081fd5b5035919050565b600060208284031215615121578081fd5b5051919050565b6000806040838503121561513a578182fd5b823591506020830135614e4381615646565b60006020828403121561515d578081fd5b813567ffffffffffffffff81168114612cea578182fd5b600060208284031215615185578081fd5b815160ff81168114612cea578182fd5b6000815180845260208085019450808401835b838110156151cd5781516001600160a01b0316875295820195908201906001016151a8565b509495945050505050565b6000815180845260208085019450808401835b838110156151cd578151875295820195908201906001016151eb565b6001600160a01b0391909116815260200190565b60006001600160a01b038088168352808716602084015280861660408401525060806060830152826080830152828460a084013781830160a090810191909152601f909201601f19160101949350505050565b6001600160a01b0392831681529116602082015260400190565b60006040825261529b6040830185615195565b828103602084015261327a81856151d8565b600060208252612cea60208301846151d8565b901515815260200190565b90815260200190565b6000602080835283518082850152825b81811015615300578581018301518582016040015282016152e4565b818111156153115783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600c908201527f746f6b656e206c6f636b65640000000000000000000000000000000000000000604082015260600190565b6020808252601e908201527f696e73756666696369656e7420617661696c61626c652062616c616e63650000604082015260600190565b60208082526008908201527f746f6f20736f6f6e000000000000000000000000000000000000000000000000604082015260600190565b6020808252600c908201527f6e756c6c20616464726573730000000000000000000000000000000000000000604082015260600190565b60208082526009908201526808585c1c1c9bdd995960ba1b604082015260600190565b60208082526011908201527f6d6178696d756d556e6465726c79696e67000000000000000000000000000000604082015260600190565b60208082526004908201526321454f4160e01b604082015260600190565b60208082526007908201527f21756e7573656400000000000000000000000000000000000000000000000000604082015260600190565b60208082526009908201527f666565203e203230250000000000000000000000000000000000000000000000604082015260600190565b6020808252600d908201527f72657365727665203e2032302500000000000000000000000000000000000000604082015260600190565b6020808252600b908201527f6e756c6c2073656c6c6572000000000000000000000000000000000000000000604082015260600190565b600060608252845160a06060840152615574610100840182615195565b90506020860151605f198085840301608086015261559283836151d8565b925060408801519150808584030160a08601526155af83836151d8565b925060608801519150808584030160c0860152506155cd82826151d8565b6080979097015160e0850152505050602081019290925260409091015290565b6001600160801b0391909116815260200190565b918252602082015260400190565b67ffffffffffffffff91909116815260200190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160a01b0381168114611b5e57600080fdfe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f2061646472657373426974733a3a6c6f776573744269745365743a2056616c7565203020686173206e6f20626974732073657445524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f7745524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa164736f6c6343000706000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balance()": {
        "details": "Returns total value of vault in `underlying`"
      },
      "decimals()": {
        "details": "ERC20 decimals "
      },
      "getBalances()": {
        "details": "Returns the value in `underlying` of the vault's deposits in each adapter."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reserveBalance()": {
        "details": "Returns current \"reserve\" balance, or balance of `underlying` held by the vault"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23693,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23700,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "allowance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23703,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2647,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 25375,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "underlying",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 25379,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "canChangeCompositionAfter",
        "offset": 20,
        "slot": "4",
        "type": "t_uint96"
      },
      {
        "astId": 25383,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 25387,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 25393,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "lockedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 25397,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 25401,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "rewardsSeller",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IRewardsSeller)13933"
      },
      {
        "astId": 25405,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "maximumUnderlying",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 25409,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 25413,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "reserveRatio",
        "offset": 8,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 25417,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "priceAtLastFee",
        "offset": 16,
        "slot": "11",
        "type": "t_uint128"
      },
      {
        "astId": 25421,
        "contract": "contracts/vaults/NirnVault.sol:NirnVault",
        "label": "packedAdaptersAndWeights",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRewardsSeller)13933": {
        "encoding": "inplace",
        "label": "contract IRewardsSeller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}