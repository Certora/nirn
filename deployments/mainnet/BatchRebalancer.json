{
  "address": "0xCA116AA63Fc652D2e2b24D0EC260Fa281A1dD4CA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vaults",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "name": "batchExecuteRebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAdapterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c4aee78255a3bfd5b82072a89b6553a15036ed09a1b12f6fffcd0ac2153e792",
  "receipt": {
    "to": null,
    "from": "0x236ECcAB8cdcfEDb099dE85c4060024bA3cE4d46",
    "contractAddress": "0xCA116AA63Fc652D2e2b24D0EC260Fa281A1dD4CA",
    "transactionIndex": 100,
    "gasUsed": "462739",
    "logsBloom": "0x
    "blockHash": "0xa124fa4eb888a3ffe27362e33e5548396657539ebcdf832d55ce3c1c423ea6f7",
    "transactionHash": "0x2c4aee78255a3bfd5b82072a89b6553a15036ed09a1b12f6fffcd0ac2153e792",
    "logs": [],
    "blockNumber": 12947192,
    "cumulativeGasUsed": "6911674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F2945604013Ee9f80aE2eDDb384462B681859C4"
  ],
  "solcInputHash": "8ef4372f6a42b1fc2976b04a41fd0d3e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaults\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"name\":\"batchExecuteRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAdapterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BatchRebalancer.sol\":\"BatchRebalancer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/BatchRebalancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/INirnVault.sol\\\";\\nimport \\\"./interfaces/IAdapterRegistry.sol\\\";\\n\\n\\ncontract BatchRebalancer {\\n  bytes4 internal constant rebalance = INirnVault.rebalance.selector;\\n  bytes4 internal constant rebalanceWithNewWeights = INirnVault.rebalanceWithNewWeights.selector;\\n  bytes4 internal constant rebalanceWithNewAdapters = INirnVault.rebalanceWithNewAdapters.selector;\\n\\n  IAdapterRegistry public immutable registry;\\n\\n  constructor(address _registry) {\\n    registry = IAdapterRegistry(_registry);\\n  }\\n\\n  function revertWithReturnData(bytes memory _returnData) internal pure {\\n    // Taken from BoringCrypto\\n    // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n    if (_returnData.length < 68) revert(\\\"silent revert\\\");\\n\\n    assembly {\\n      // Slice the sighash.\\n      _returnData := add(_returnData, 0x04)\\n    }\\n    revert(abi.decode(_returnData, (string))); // All that remains is the revert string\\n  }\\n\\n  function batchExecuteRebalance(address[] calldata vaults, bytes[] calldata calldatas) external {\\n    require(msg.sender == tx.origin, \\\"!EOA\\\");\\n    uint256 len = vaults.length;\\n    require(calldatas.length == len, \\\"bad lengths\\\");\\n    for (uint256 i; i < len; i++) {\\n      INirnVault vault = INirnVault(vaults[i]);\\n      require(\\n        registry.vaultsByUnderlying(vault.underlying()) == address(vault),\\n        \\\"bad vault\\\"\\n      );\\n      bytes memory data = calldatas[i];\\n      bytes4 sig;\\n      assembly { sig := mload(add(data, 32)) }\\n      require(\\n        sig == rebalance ||\\n        sig == rebalanceWithNewWeights ||\\n        sig == rebalanceWithNewAdapters,\\n        \\\"fn not allowed\\\"\\n      );\\n      (bool success, bytes memory returnData) = address(vault).call(data);\\n      if (!success) revertWithReturnData(returnData);\\n    }\\n  }\\n}\",\"keccak256\":\"0x966e683deafee9bbae99667dbe4362d85da0df6d08176aee5d114a9f6e87db36\",\"license\":\"MIT\"},\"contracts/interfaces/IAdapterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IAdapterRegistry {\\n/* ========== Events ========== */\\n\\n  event ProtocolAdapterAdded(uint256 protocolId, address protocolAdapter);\\n\\n  event ProtocolAdapterRemoved(uint256 protocolId);\\n\\n  event TokenAdapterAdded(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenAdapterRemoved(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenSupportAdded(address underlying);\\n\\n  event TokenSupportRemoved(address underlying);\\n\\n  event VaultFactoryAdded(address factory);\\n\\n  event VaultFactoryRemoved(address factory);\\n\\n  event VaultAdded(address underlying, address vault);\\n\\n  event VaultRemoved(address underlying, address vault);\\n\\n/* ========== Structs ========== */\\n\\n  struct TokenAdapter {\\n    address adapter;\\n    uint96 protocolId;\\n  }\\n\\n/* ========== Storage ========== */\\n\\n  function protocolsCount() external view returns (uint256);\\n\\n  function protocolAdapters(uint256 id) external view returns (address protocolAdapter);\\n\\n  function protocolAdapterIds(address protocolAdapter) external view returns (uint256 id);\\n\\n  function vaultsByUnderlying(address underlying) external view returns (address vault);\\n\\n  function approvedVaultFactories(address factory) external view returns (bool approved);\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external;\\n\\n  function removeVaultFactory(address _factory) external;\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external;\\n\\n  function removeVault(address vault) external;\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external returns (uint256 id);\\n\\n  function removeProtocolAdapter(address protocolAdapter) external;\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function addTokenAdapter(address adapter) external;\\n\\n  function addTokenAdapters(address[] calldata adapters) external;\\n\\n  function removeTokenAdapter(address adapter) external;\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view returns (address[] memory);\\n\\n  function haveVaultFor(address underlying) external view returns (bool);\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view returns (address[] memory adapters, uint256[] memory ids);\\n\\n  function getProtocolMetadata(uint256 id) external view returns (address protocolAdapter, string memory name);\\n\\n  function getProtocolForTokenAdapter(address adapter) external view returns (address protocolAdapter);\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view returns (bool);\\n\\n  function getSupportedTokens() external view returns (address[] memory list);\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view returns (bool);\\n\\n  function getAdaptersList(address underlying) external view returns (address[] memory list);\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view returns (address);\\n\\n  function getAdaptersCount(address underlying) external view returns (uint256);\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdapterWithHighestAPR(address underlying) external view returns (address adapter, uint256 apr);\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view returns (address adapter, uint256 apr);\\n}\\n\\n\",\"keccak256\":\"0x1c14c07f116309a29f39ebaf473e3a810dc7b018cfaea67982872a66bec899d9\",\"license\":\"MIT\"},\"contracts/interfaces/INirnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IAdapterRegistry.sol\\\";\\nimport \\\"./ITokenAdapter.sol\\\";\\nimport \\\"./IRewardsSeller.sol\\\";\\n\\n\\ninterface INirnVault {\\n/* ========== Events ========== */\\n\\n  /** @dev Emitted when an adapter is removed and its balance fully withdrawn. */\\n  event AdapterRemoved(IErc20Adapter adapter);\\n\\n  /** @dev Emitted when weights or adapters are updated. */\\n  event AllocationsUpdated(IErc20Adapter[] adapters, uint256[] weights);\\n\\n  /** @dev Emitted when performance fees are claimed. */\\n  event FeesClaimed(uint256 underlyingAmount, uint256 sharesMinted);\\n\\n  /** @dev Emitted when a rebalance happens without allocation changes. */\\n  event Rebalanced();\\n\\n  /** @dev Emitted when max underlying is updated. */\\n  event SetMaximumUnderlying(uint256 maxBalance);\\n\\n  /** @dev Emitted when fee recipient address is set. */\\n  event SetFeeRecipient(address feeRecipient);\\n\\n  /** @dev Emitted when performance fee is set. */\\n  event SetPerformanceFee(uint256 performanceFee);\\n\\n  /** @dev Emitted when reserve ratio is set. */\\n  event SetReserveRatio(uint256 reserveRatio);\\n\\n  /** @dev Emitted when rewards seller contract is set. */\\n  event SetRewardsSeller(address rewardsSeller);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Deposit(uint256 shares, uint256 underlying);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Withdrawal(uint256 shares, uint256 underlying);\\n\\n/* ========== Structs ========== */\\n\\n  struct DistributionParameters {\\n    IErc20Adapter[] adapters;\\n    uint256[] weights;\\n    uint256[] balances;\\n    int256[] liquidityDeltas;\\n    uint256 netAPR;\\n  }\\n\\n/* ========== Initializer ========== */\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external;\\n\\n/* ========== Config Queries ========== */\\n\\n  function minimumAPRImprovement() external view returns (uint256);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function eoaSafeCaller() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);  \\n\\n  function feeRecipient() external view returns (address);\\n\\n  function rewardsSeller() external view returns (IRewardsSeller);\\n\\n  function lockedTokens(address) external view returns (bool);\\n\\n  function maximumUnderlying() external view returns (uint256);\\n\\n  function performanceFee() external view returns (uint64);\\n\\n  function reserveRatio() external view returns (uint64);\\n\\n  function priceAtLastFee() external view returns (uint128);\\n\\n  function minimumCompositionChangeDelay() external view returns (uint256);\\n\\n  function canChangeCompositionAfter() external view returns (uint96);\\n\\n/* ========== Admin Actions ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external;\\n\\n  function setPerformanceFee(uint64 _performanceFee) external;\\n\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external;\\n\\n  function setReserveRatio(uint64 _reserveRatio) external;\\n\\n/* ========== Balance Queries ========== */\\n\\n  function balance() external view returns (uint256 sum);\\n\\n  function reserveBalance() external view returns (uint256);\\n\\n/* ========== Fee Queries ========== */\\n\\n  function getPendingFees() external view returns (uint256);\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getPricePerFullShareWithFee() external view returns (uint256);\\n\\n/* ========== Reward Token Sales ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external;\\n\\n/* ========== Adapter Queries ========== */\\n\\n  function getBalances() external view returns (uint256[] memory balances);\\n\\n  function getAdaptersAndWeights() external view returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  );\\n\\n/* ========== Status Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view returns (int256[] memory liquidityDeltas);\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function currentDistribution() external view returns (\\n    DistributionParameters memory params,\\n    uint256 totalProductiveBalance,\\n    uint256 _reserveBalance\\n  );\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external returns (uint256 shares);\\n\\n  function depositTo(uint256 amount, address to) external returns (uint256 shares);\\n\\n  function withdraw(uint256 shares) external returns (uint256 owed);\\n\\n  function withdrawUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external;\\n\\n  function rebalanceWithNewWeights(uint256[] calldata proposedWeights) external;\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external;\\n}\",\"keccak256\":\"0xe378d0ed60046e18cd319305906687fc07980c3533038fb8dfa3f4c349ffd605\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IRewardsSeller {\\n  /**\\n   * @dev Sell `rewardsToken` for `underlyingToken`.\\n   * Should only be called after `rewardsToken` is transferred.\\n   * @param sender - Address of account that initially triggered the call. Can be used to restrict who can trigger a sale.\\n   * @param rewardsToken - Address of the token to sell.\\n   * @param underlyingToken - Address of the token to buy.\\n   * @param params - Any additional data that the caller provided.\\n   */\\n  function sellRewards(\\n    address sender,\\n    address rewardsToken,\\n    address underlyingToken,\\n    bytes calldata params\\n  ) external;\\n}\",\"keccak256\":\"0x8a22b1dce3ac025df91db3c5d86823d386d48d27d5920acb2bf89583f5fc89e0\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IErc20Adapter {\\n/* ========== Metadata ========== */\\n\\n  function underlying() external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function availableLiquidity() external view returns (uint256);\\n\\n/* ========== Conversion ========== */\\n\\n  function toUnderlyingAmount(uint256 tokenAmount) external view returns (uint256);\\n\\n  function toWrappedAmount(uint256 underlyingAmount) external view returns (uint256);\\n\\n/* ========== Performance Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getHypotheticalAPR(int256 liquidityDelta) external view returns (uint256);\\n\\n  function getRevenueBreakdown()\\n    external\\n    view\\n    returns (\\n      address[] memory assets,\\n      uint256[] memory aprs\\n    );\\n\\n/* ========== Caller Balance Queries ========== */\\n\\n  function balanceWrapped() external view returns (uint256);\\n\\n  function balanceUnderlying() external view returns (uint256);\\n\\n/* ========== Interactions ========== */\\n\\n  function deposit(uint256 amountUnderlying) external returns (uint256 amountMinted);\\n\\n  function withdraw(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAll() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlying(uint256 amountUnderlying) external returns (uint256 amountBurned);\\n\\n  function withdrawUnderlyingUpTo(uint256 amountUnderlying) external returns (uint256 amountReceived);\\n}\\n\\ninterface IEtherAdapter is IErc20Adapter {\\n  function depositETH() external payable returns (uint256 amountMinted);\\n\\n  function withdrawAsETH(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAllAsETH() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlyingAsETH(uint256 amountUnderlying) external returns (uint256 amountBurned); \\n}\",\"keccak256\":\"0x773adf331e96b40f4ffd3ba357730987a3a0b3915f7593f47d0314ce9a181f61\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107f83803806107f883398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6107656100936000398060f2528061036f52506107656000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634cd135391461003b5780637b10399914610050575b600080fd5b61004e61004936600461046e565b61006e565b005b61005861036d565b604051610065919061058a565b60405180910390f35b3332146100965760405162461bcd60e51b815260040161008d90610676565b60405180910390fd5b828181146100b65760405162461bcd60e51b815260040161008d906105d1565b60005b818110156103655760008686838181106100cf57fe5b90506020020160208101906100e4919061042f565b9050806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f6fb74ff836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561015857600080fd5b505afa15801561016c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101909190610452565b6040518263ffffffff1660e01b81526004016101ac919061058a565b60206040518083038186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc9190610452565b6001600160a01b0316146102225760405162461bcd60e51b815260040161008d90610694565b600085858481811061023057fe5b905060200281019061024291906106cb565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050506020820151919250506001600160e01b03198116631f5f0a8760e21b14806102ad57506001600160e01b031981166327f9b53f60e01b145b806102c857506001600160e01b03198116630755913960e51b145b6102e45760405162461bcd60e51b815260040161008d90610608565b600080846001600160a01b0316846040516102ff919061056e565b6000604051808303816000865af19150503d806000811461033c576040519150601f19603f3d011682016040523d82523d6000602084013e610341565b606091505b5091509150816103545761035481610391565b5050600190930192506100b9915050565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6044815110156103b35760405162461bcd60e51b815260040161008d9061063f565b600481019050808060200190518101906103cd91906104d7565b60405162461bcd60e51b815260040161008d919061059e565b60008083601f8401126103f7578081fd5b50813567ffffffffffffffff81111561040e578182fd5b602083019150836020808302850101111561042857600080fd5b9250929050565b600060208284031215610440578081fd5b813561044b81610740565b9392505050565b600060208284031215610463578081fd5b815161044b81610740565b60008060008060408587031215610483578283fd5b843567ffffffffffffffff8082111561049a578485fd5b6104a6888389016103e6565b909650945060208701359150808211156104be578384fd5b506104cb878288016103e6565b95989497509550505050565b6000602082840312156104e8578081fd5b815167ffffffffffffffff808211156104ff578283fd5b818401915084601f830112610512578283fd5b81518181111561051e57fe5b604051601f8201601f19168101602001838111828210171561053c57fe5b604052818152838201602001871015610553578485fd5b610564826020830160208701610710565b9695505050505050565b60008251610580818460208701610710565b9190910192915050565b6001600160a01b0391909116815260200190565b60006020825282518060208401526105bd816040850160208701610710565b601f01601f19169190910160400192915050565b6020808252600b908201527f626164206c656e67746873000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f666e206e6f7420616c6c6f776564000000000000000000000000000000000000604082015260600190565b6020808252600d908201527f73696c656e742072657665727400000000000000000000000000000000000000604082015260600190565b60208082526004908201526321454f4160e01b604082015260600190565b60208082526009908201527f626164207661756c740000000000000000000000000000000000000000000000604082015260600190565b6000808335601e198436030181126106e1578283fd5b83018035915067ffffffffffffffff8211156106fb578283fd5b60200191503681900382131561042857600080fd5b60005b8381101561072b578181015183820152602001610713565b8381111561073a576000848401525b50505050565b6001600160a01b038116811461075557600080fd5b5056fea164736f6c6343000706000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634cd135391461003b5780637b10399914610050575b600080fd5b61004e61004936600461046e565b61006e565b005b61005861036d565b604051610065919061058a565b60405180910390f35b3332146100965760405162461bcd60e51b815260040161008d90610676565b60405180910390fd5b828181146100b65760405162461bcd60e51b815260040161008d906105d1565b60005b818110156103655760008686838181106100cf57fe5b90506020020160208101906100e4919061042f565b9050806001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f6fb74ff836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561015857600080fd5b505afa15801561016c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101909190610452565b6040518263ffffffff1660e01b81526004016101ac919061058a565b60206040518083038186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc9190610452565b6001600160a01b0316146102225760405162461bcd60e51b815260040161008d90610694565b600085858481811061023057fe5b905060200281019061024291906106cb565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050506020820151919250506001600160e01b03198116631f5f0a8760e21b14806102ad57506001600160e01b031981166327f9b53f60e01b145b806102c857506001600160e01b03198116630755913960e51b145b6102e45760405162461bcd60e51b815260040161008d90610608565b600080846001600160a01b0316846040516102ff919061056e565b6000604051808303816000865af19150503d806000811461033c576040519150601f19603f3d011682016040523d82523d6000602084013e610341565b606091505b5091509150816103545761035481610391565b5050600190930192506100b9915050565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6044815110156103b35760405162461bcd60e51b815260040161008d9061063f565b600481019050808060200190518101906103cd91906104d7565b60405162461bcd60e51b815260040161008d919061059e565b60008083601f8401126103f7578081fd5b50813567ffffffffffffffff81111561040e578182fd5b602083019150836020808302850101111561042857600080fd5b9250929050565b600060208284031215610440578081fd5b813561044b81610740565b9392505050565b600060208284031215610463578081fd5b815161044b81610740565b60008060008060408587031215610483578283fd5b843567ffffffffffffffff8082111561049a578485fd5b6104a6888389016103e6565b909650945060208701359150808211156104be578384fd5b506104cb878288016103e6565b95989497509550505050565b6000602082840312156104e8578081fd5b815167ffffffffffffffff808211156104ff578283fd5b818401915084601f830112610512578283fd5b81518181111561051e57fe5b604051601f8201601f19168101602001838111828210171561053c57fe5b604052818152838201602001871015610553578485fd5b610564826020830160208701610710565b9695505050505050565b60008251610580818460208701610710565b9190910192915050565b6001600160a01b0391909116815260200190565b60006020825282518060208401526105bd816040850160208701610710565b601f01601f19169190910160400192915050565b6020808252600b908201527f626164206c656e67746873000000000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f666e206e6f7420616c6c6f776564000000000000000000000000000000000000604082015260600190565b6020808252600d908201527f73696c656e742072657665727400000000000000000000000000000000000000604082015260600190565b60208082526004908201526321454f4160e01b604082015260600190565b60208082526009908201527f626164207661756c740000000000000000000000000000000000000000000000604082015260600190565b6000808335601e198436030181126106e1578283fd5b83018035915067ffffffffffffffff8211156106fb578283fd5b60200191503681900382131561042857600080fd5b60005b8381101561072b578181015183820152602001610713565b8381111561073a576000848401525b50505050565b6001600160a01b038116811461075557600080fd5b5056fea164736f6c6343000706000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}