{
  "address": "0x5F2945604013Ee9f80aE2eDDb384462B681859C4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolAdapter",
          "type": "address"
        }
      ],
      "name": "ProtocolAdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        }
      ],
      "name": "ProtocolAdapterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "name": "TokenAdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "name": "TokenAdapterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "TokenSupportAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "TokenSupportRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "VaultFactoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "VaultFactoryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolAdapter",
          "type": "address"
        }
      ],
      "name": "addProtocolAdapter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "addTokenAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "addTokenAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "addVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedVaultFactories",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapperToken",
          "type": "address"
        }
      ],
      "name": "getAdapterForWrapperToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getAdapterWithHighestAPR",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "excludingAdapter",
          "type": "address"
        }
      ],
      "name": "getAdapterWithHighestAPRForDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getAdaptersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getAdaptersList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getAdaptersSortedByAPR",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "aprs",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "excludingAdapter",
          "type": "address"
        }
      ],
      "name": "getAdaptersSortedByAPRWithDeposit",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "aprs",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolAdaptersAndIds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "getProtocolForTokenAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolAdapter",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProtocolMetadata",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolAdapter",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultsList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "haveVaultFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "isApprovedAdapter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "isSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "protocolAdapterIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "protocolAdapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolAdapter",
          "type": "address"
        }
      ],
      "name": "removeProtocolAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "removeTokenAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "removeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "removeVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultsByUnderlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7587a41e1fda5fdf3e9360f85cea638805a69f1d1ab79711ce85181892242f4",
  "receipt": {
    "to": null,
    "from": "0x236ECcAB8cdcfEDb099dE85c4060024bA3cE4d46",
    "contractAddress": "0x5F2945604013Ee9f80aE2eDDb384462B681859C4",
    "transactionIndex": 39,
    "gasUsed": "2251285",
    "logsBloom": "0x
    "blockHash": "0xe37c34664f3df670178d3fbfceeac818d0d6c2e125281ef0ab57749cefbfcdbf",
    "transactionHash": "0xf7587a41e1fda5fdf3e9360f85cea638805a69f1d1ab79711ce85181892242f4",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 12941221,
        "transactionHash": "0xf7587a41e1fda5fdf3e9360f85cea638805a69f1d1ab79711ce85181892242f4",
        "address": "0x5F2945604013Ee9f80aE2eDDb384462B681859C4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000236eccab8cdcfedb099de85c4060024ba3ce4d46"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0xe37c34664f3df670178d3fbfceeac818d0d6c2e125281ef0ab57749cefbfcdbf"
      }
    ],
    "blockNumber": 12941221,
    "cumulativeGasUsed": "5125362",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9bffdedaeba4603e348d0b7b645d9a82",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"name\":\"ProtocolAdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"}],\"name\":\"ProtocolAdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"TokenAdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"TokenAdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"TokenSupportAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"TokenSupportRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"VaultFactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"VaultFactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"name\":\"addProtocolAdapter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"addTokenAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"addTokenAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedVaultFactories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapperToken\",\"type\":\"address\"}],\"name\":\"getAdapterForWrapperToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdapterWithHighestAPR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excludingAdapter\",\"type\":\"address\"}],\"name\":\"getAdapterWithHighestAPRForDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdaptersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdaptersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getAdaptersSortedByAPR\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"aprs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"excludingAdapter\",\"type\":\"address\"}],\"name\":\"getAdaptersSortedByAPRWithDeposit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"aprs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolAdaptersAndIds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getProtocolForTokenAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProtocolMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"haveVaultFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"isApprovedAdapter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolAdapterIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolAdapter\",\"type\":\"address\"}],\"name\":\"removeProtocolAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"removeTokenAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultsByUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"adaptersByWrapperToken\":{\"details\":\"Mapping from wrapper tokens to adapters. \"},\"approvedVaultFactories\":{\"details\":\"Accounts allowed to register vaults. \"},\"protocolAdapterIds\":{\"details\":\"Mapping from protocol adapter addresses to protocol IDs. \"},\"protocolAdapters\":{\"details\":\"Mapping from protocol IDs to adapter addresses. \"},\"protocolsCount\":{\"details\":\"Number of protocol adapters registered. \"},\"supportedTokens\":{\"details\":\"List of all underlying tokens with registered adapters. \"},\"tokenAdapters\":{\"details\":\"Mapping from underlying tokens to lists of adapters. \"},\"vaults\":{\"details\":\"List of all registered vaults. \"},\"vaultsByUnderlying\":{\"details\":\"Mapping from underlying token to registered vault. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdapterRegistry.sol\":\"AdapterRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/AdapterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ITokenAdapter.sol\\\";\\nimport \\\"./interfaces/IProtocolAdapter.sol\\\";\\nimport \\\"./interfaces/IAdapterRegistry.sol\\\";\\nimport \\\"./interfaces/INirnVault.sol\\\";\\nimport \\\"./libraries/ArrayHelper.sol\\\";\\nimport \\\"./libraries/DynamicArrays.sol\\\";\\n\\n\\ncontract AdapterRegistry is Ownable(), IAdapterRegistry {\\n  using ArrayHelper for address[];\\n  using ArrayHelper for EnumerableSet.AddressSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using DynamicArrays for address[];\\n  using DynamicArrays for uint256[];\\n\\n/* ========== Storage ========== */\\n\\n  /** @dev Mapping from underlying token to registered vault. */\\n  mapping(address => address) public override vaultsByUnderlying;\\n\\n  /** @dev Accounts allowed to register vaults. */\\n  mapping(address => bool) public override approvedVaultFactories;\\n\\n  /** @dev List of all registered vaults. */\\n  EnumerableSet.AddressSet internal vaults;\\n\\n  /** @dev Number of protocol adapters registered. */\\n  uint256 public override protocolsCount;\\n\\n  /** @dev Mapping from protocol IDs to adapter addresses. */\\n  mapping(uint256 => address) public override protocolAdapters;\\n\\n  /** @dev Mapping from protocol adapter addresses to protocol IDs. */\\n  mapping(address => uint256) public override protocolAdapterIds;\\n\\n  /** @dev Mapping from underlying tokens to lists of adapters. */\\n  mapping(address => address[]) internal tokenAdapters;\\n\\n  /** @dev Mapping from wrapper tokens to adapters. */\\n  mapping(address => TokenAdapter) internal adaptersByWrapperToken;\\n\\n  /** @dev List of all underlying tokens with registered adapters. */\\n  EnumerableSet.AddressSet internal supportedTokens;\\n\\n/* ========== Modifiers ========== */\\n\\n  modifier onlyProtocolOrOwner {\\n    require(protocolAdapterIds[msg.sender] > 0 || msg.sender == owner(), \\\"!approved\\\");\\n    _;\\n  }\\n\\n  function getProtocolAdapterId(address protocolAdapter) internal view returns (uint256 id) {\\n    require((id = protocolAdapterIds[protocolAdapter]) > 0, \\\"!exists\\\");\\n  }\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external override onlyOwner {\\n    require(_factory != address(0), \\\"null address\\\");\\n    require(!approvedVaultFactories[_factory], \\\"already approved\\\");\\n    approvedVaultFactories[_factory] = true;\\n    emit VaultFactoryAdded(_factory);\\n  }\\n\\n  function removeVaultFactory(address _factory) external override onlyOwner {\\n    require(approvedVaultFactories[_factory], \\\"!approved\\\");\\n    approvedVaultFactories[_factory] = false;\\n    emit VaultFactoryRemoved(_factory);\\n  }\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external override {\\n    require(approvedVaultFactories[msg.sender], \\\"!approved\\\");\\n    address underlying = INirnVault(vault).underlying();\\n    require(vaultsByUnderlying[underlying] == address(0), \\\"exists\\\");\\n    vaultsByUnderlying[underlying] = vault;\\n    vaults.add(vault);\\n    emit VaultAdded(underlying, vault);\\n  }\\n\\n  function removeVault(address vault) external override onlyOwner {\\n    address underlying = INirnVault(vault).underlying();\\n    require(vaultsByUnderlying[underlying] != address(0), \\\"!exists\\\");\\n    vaultsByUnderlying[underlying] = address(0);\\n    vaults.remove(vault);\\n    emit VaultRemoved(underlying, vault);\\n  }\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external override onlyProtocolOrOwner returns (uint256 id) {\\n    require(protocolAdapter != address(0), \\\"null\\\");\\n    require(protocolAdapterIds[protocolAdapter] == 0, \\\"exists\\\");\\n    id = ++protocolsCount;\\n    protocolAdapterIds[protocolAdapter] = id;\\n    protocolAdapters[id] = protocolAdapter;\\n    emit ProtocolAdapterAdded(id, protocolAdapter);\\n  }\\n\\n  function removeProtocolAdapter(address protocolAdapter) external override onlyOwner {\\n    uint256 id = getProtocolAdapterId(protocolAdapter);\\n    delete protocolAdapterIds[protocolAdapter];\\n    delete protocolAdapters[id];\\n    emit ProtocolAdapterRemoved(id);\\n  }\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function _addTokenAdapter(IErc20Adapter adapter, uint256 id) internal {\\n    address underlying = adapter.underlying();\\n    address wrapper = adapter.token();\\n    require(adaptersByWrapperToken[wrapper].protocolId == 0, \\\"adapter exists\\\");\\n    if (tokenAdapters[underlying].length == 0) {\\n      supportedTokens.add(underlying);\\n      emit TokenSupportAdded(underlying);\\n    }\\n    tokenAdapters[underlying].push(address(adapter));\\n    adaptersByWrapperToken[wrapper] = TokenAdapter(address(adapter), uint96(id));\\n    emit TokenAdapterAdded(address(adapter), id, underlying, wrapper);\\n  }\\n\\n  function addTokenAdapter(address adapter) external override {\\n    uint256 id = getProtocolAdapterId(msg.sender);\\n    _addTokenAdapter(IErc20Adapter(adapter), id);\\n  }\\n\\n  function addTokenAdapters(address[] calldata adapters) external override {\\n    uint256 id = getProtocolAdapterId(msg.sender);\\n    uint256 len = adapters.length;\\n    for (uint256 i = 0; i < len; i++) {\\n      IErc20Adapter adapter = IErc20Adapter(adapters[i]);\\n      _addTokenAdapter(adapter, id);\\n    }\\n  }\\n\\n  function removeTokenAdapter(address adapter) external override {\\n    address wrapper = IErc20Adapter(adapter).token();\\n    TokenAdapter memory adapterRecord = adaptersByWrapperToken[wrapper];\\n    require(adapterRecord.adapter == address(adapter), \\\"wrong adapter\\\");\\n    uint256 protocolId = adapterRecord.protocolId;\\n    require(\\n      msg.sender == owner() ||\\n      msg.sender == protocolAdapters[protocolId],\\n      \\\"!authorized\\\"\\n    );\\n    delete adaptersByWrapperToken[wrapper];\\n    address underlying = IErc20Adapter(adapter).underlying();\\n    address[] storage adapters = tokenAdapters[underlying];\\n    uint256 index = adapters.indexOf(address(adapter));\\n    adapters.remove(index);\\n    if (adapters.length == 0) {\\n      supportedTokens.remove(underlying);\\n      emit TokenSupportRemoved(underlying);\\n    }\\n    emit TokenAdapterRemoved(address(adapter), protocolId, underlying, wrapper);\\n  }\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view override returns (address[] memory) {\\n    return vaults.toArray();\\n  }\\n\\n  function haveVaultFor(address underlying) external view override returns (bool) {\\n    return vaultsByUnderlying[underlying] != address(0);\\n  }\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view override returns (address[] memory adapters, uint256[] memory ids) {\\n    uint256 len = protocolsCount;\\n    adapters = DynamicArrays.dynamicAddressArray(len);\\n    ids = DynamicArrays.dynamicUint256Array(len);\\n    for (uint256 id = 1; id <= len; id++) {\\n      address adapter = protocolAdapters[id];\\n      if (adapter != address(0)) {\\n        adapters.dynamicPush(adapter);\\n        ids.dynamicPush(id);\\n      }\\n    }\\n  }\\n\\n  function getProtocolMetadata(uint256 id) external view override returns (address protocolAdapter, string memory name) {\\n    protocolAdapter = protocolAdapters[id];\\n    require(protocolAdapter != address(0), \\\"invalid id\\\");\\n    name = IProtocolAdapter(protocolAdapter).protocol();\\n  }\\n\\n  function getProtocolForTokenAdapter(address adapter) external view override returns (address protocolAdapter) {\\n    address wrapper = IErc20Adapter(adapter).token();\\n    TokenAdapter memory adapterRecord = adaptersByWrapperToken[wrapper];\\n    require(adapterRecord.adapter == adapter, \\\"!approved\\\");\\n    protocolAdapter = protocolAdapters[adapterRecord.protocolId];\\n  }\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view override returns (bool) {\\n    return tokenAdapters[underlying].length > 0;\\n  }\\n\\n  function getSupportedTokens() external view override returns (address[] memory list) {\\n    list = supportedTokens.toArray();\\n  }\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view override returns (bool) {\\n    address wrapper = IErc20Adapter(adapter).token();\\n    TokenAdapter memory adapterRecord = adaptersByWrapperToken[wrapper];\\n    return adapterRecord.adapter == adapter;\\n  }\\n\\n  function getAdaptersList(address underlying) public view override returns (address[] memory list) {\\n    list = tokenAdapters[underlying];\\n  }\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view override returns (address) {\\n    return adaptersByWrapperToken[wrapperToken].adapter;\\n  }\\n\\n  function getAdaptersCount(address underlying) external view override returns (uint256) {\\n    return tokenAdapters[underlying].length;\\n  }\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    public\\n    view\\n    override\\n    returns (address[] memory adapters, uint256[] memory aprs)\\n  {\\n    adapters = getAdaptersList(underlying);\\n    uint256 len = adapters.length;\\n    aprs = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) {\\n      try IErc20Adapter(adapters[i]).getAPR() returns (uint256 apr) {\\n        aprs[i] = apr;\\n      } catch {\\n        aprs[i] = 0;\\n      }\\n    }\\n    adapters.sortByDescendingScore(aprs);\\n  }\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    public\\n    view\\n    override\\n    returns (address[] memory adapters, uint256[] memory aprs)\\n  {\\n    adapters = getAdaptersList(underlying);\\n    uint256 len = adapters.length;\\n    aprs = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) {\\n      address adapter = adapters[i];\\n      if (adapter == excludingAdapter) {\\n        try IErc20Adapter(adapter).getAPR() returns (uint256 apr) {\\n          aprs[i] = apr;\\n        } catch {\\n          aprs[i] = 0;\\n        }\\n      } else {\\n        try IErc20Adapter(adapter).getHypotheticalAPR(int256(deposit)) returns (uint256 apr) {\\n          aprs[i] = apr;\\n        } catch {\\n          aprs[i] = 0;\\n        }\\n      }\\n    }\\n    adapters.sortByDescendingScore(aprs);\\n  }\\n\\n  function getAdapterWithHighestAPR(address underlying) external view override returns (address adapter, uint256 apr) {\\n    (address[] memory adapters, uint256[] memory aprs) = getAdaptersSortedByAPR(underlying);\\n    adapter = adapters[0];\\n    apr = aprs[0];\\n  }\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view override returns (address adapter, uint256 apr) {\\n    (address[] memory adapters, uint256[] memory aprs) = getAdaptersSortedByAPRWithDeposit(\\n      underlying,\\n      deposit,\\n      excludingAdapter\\n    );\\n    adapter = adapters[0];\\n    apr = aprs[0];\\n  }\\n}\\n\",\"keccak256\":\"0x69ad2d3039b65d289bd9f00f67a8eb12bace21f54e72676d3b5f30a7442782ae\",\"license\":\"MIT\"},\"contracts/interfaces/IAdapterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IAdapterRegistry {\\n/* ========== Events ========== */\\n\\n  event ProtocolAdapterAdded(uint256 protocolId, address protocolAdapter);\\n\\n  event ProtocolAdapterRemoved(uint256 protocolId);\\n\\n  event TokenAdapterAdded(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenAdapterRemoved(address adapter, uint256 protocolId, address underlying, address wrapper);\\n\\n  event TokenSupportAdded(address underlying);\\n\\n  event TokenSupportRemoved(address underlying);\\n\\n  event VaultFactoryAdded(address factory);\\n\\n  event VaultFactoryRemoved(address factory);\\n\\n  event VaultAdded(address underlying, address vault);\\n\\n  event VaultRemoved(address underlying, address vault);\\n\\n/* ========== Structs ========== */\\n\\n  struct TokenAdapter {\\n    address adapter;\\n    uint96 protocolId;\\n  }\\n\\n/* ========== Storage ========== */\\n\\n  function protocolsCount() external view returns (uint256);\\n\\n  function protocolAdapters(uint256 id) external view returns (address protocolAdapter);\\n\\n  function protocolAdapterIds(address protocolAdapter) external view returns (uint256 id);\\n\\n  function vaultsByUnderlying(address underlying) external view returns (address vault);\\n\\n  function approvedVaultFactories(address factory) external view returns (bool approved);\\n\\n/* ========== Vault Factory Management ========== */\\n\\n  function addVaultFactory(address _factory) external;\\n\\n  function removeVaultFactory(address _factory) external;\\n\\n/* ========== Vault Management ========== */\\n\\n  function addVault(address vault) external;\\n\\n  function removeVault(address vault) external;\\n\\n/* ========== Protocol Adapter Management ========== */\\n\\n  function addProtocolAdapter(address protocolAdapter) external returns (uint256 id);\\n\\n  function removeProtocolAdapter(address protocolAdapter) external;\\n\\n/* ========== Token Adapter Management ========== */\\n\\n  function addTokenAdapter(address adapter) external;\\n\\n  function addTokenAdapters(address[] calldata adapters) external;\\n\\n  function removeTokenAdapter(address adapter) external;\\n\\n/* ========== Vault Queries ========== */\\n\\n  function getVaultsList() external view returns (address[] memory);\\n\\n  function haveVaultFor(address underlying) external view returns (bool);\\n\\n/* ========== Protocol Queries ========== */\\n\\n  function getProtocolAdaptersAndIds() external view returns (address[] memory adapters, uint256[] memory ids);\\n\\n  function getProtocolMetadata(uint256 id) external view returns (address protocolAdapter, string memory name);\\n\\n  function getProtocolForTokenAdapter(address adapter) external view returns (address protocolAdapter);\\n\\n/* ========== Supported Token Queries ========== */\\n\\n  function isSupported(address underlying) external view returns (bool);\\n\\n  function getSupportedTokens() external view returns (address[] memory list);\\n\\n/* ========== Token Adapter Queries ========== */\\n\\n  function isApprovedAdapter(address adapter) external view returns (bool);\\n\\n  function getAdaptersList(address underlying) external view returns (address[] memory list);\\n\\n  function getAdapterForWrapperToken(address wrapperToken) external view returns (address);\\n\\n  function getAdaptersCount(address underlying) external view returns (uint256);\\n\\n  function getAdaptersSortedByAPR(address underlying)\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdaptersSortedByAPRWithDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  )\\n    external\\n    view\\n    returns (address[] memory adapters, uint256[] memory aprs);\\n\\n  function getAdapterWithHighestAPR(address underlying) external view returns (address adapter, uint256 apr);\\n\\n  function getAdapterWithHighestAPRForDeposit(\\n    address underlying,\\n    uint256 deposit,\\n    address excludingAdapter\\n  ) external view returns (address adapter, uint256 apr);\\n}\\n\\n\",\"keccak256\":\"0x1c14c07f116309a29f39ebaf473e3a810dc7b018cfaea67982872a66bec899d9\",\"license\":\"MIT\"},\"contracts/interfaces/INirnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"./IAdapterRegistry.sol\\\";\\nimport \\\"./ITokenAdapter.sol\\\";\\nimport \\\"./IRewardsSeller.sol\\\";\\n\\n\\ninterface INirnVault {\\n/* ========== Events ========== */\\n\\n  /** @dev Emitted when an adapter is removed and its balance fully withdrawn. */\\n  event AdapterRemoved(IErc20Adapter adapter);\\n\\n  /** @dev Emitted when weights or adapters are updated. */\\n  event AllocationsUpdated(IErc20Adapter[] adapters, uint256[] weights);\\n\\n  /** @dev Emitted when performance fees are claimed. */\\n  event FeesClaimed(uint256 underlyingAmount, uint256 sharesMinted);\\n\\n  /** @dev Emitted when a rebalance happens without allocation changes. */\\n  event Rebalanced();\\n\\n  /** @dev Emitted when max underlying is updated. */\\n  event SetMaximumUnderlying(uint256 maxBalance);\\n\\n  /** @dev Emitted when fee recipient address is set. */\\n  event SetFeeRecipient(address feeRecipient);\\n\\n  /** @dev Emitted when performance fee is set. */\\n  event SetPerformanceFee(uint256 performanceFee);\\n\\n  /** @dev Emitted when reserve ratio is set. */\\n  event SetReserveRatio(uint256 reserveRatio);\\n\\n  /** @dev Emitted when rewards seller contract is set. */\\n  event SetRewardsSeller(address rewardsSeller);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Deposit(uint256 shares, uint256 underlying);\\n\\n  /** @dev Emitted when a deposit is made. */\\n  event Withdrawal(uint256 shares, uint256 underlying);\\n\\n/* ========== Initializer ========== */\\n\\n  function initialize(\\n    address _underlying,\\n    address _rewardsSeller,\\n    address _feeRecipient,\\n    address _owner\\n  ) external;\\n\\n/* ========== Config Queries ========== */\\n\\n  function minimumAPRImprovement() external view returns (uint256);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function eoaSafeCaller() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);  \\n\\n  function feeRecipient() external view returns (address);\\n\\n  function rewardsSeller() external view returns (IRewardsSeller);\\n\\n  function lockedTokens(address) external view returns (bool);\\n\\n  function maximumUnderlying() external view returns (uint256);\\n\\n  function performanceFee() external view returns (uint64);\\n\\n  function reserveRatio() external view returns (uint64);\\n\\n  function priceAtLastFee() external view returns (uint128);\\n\\n/* ========== Admin Actions ========== */\\n\\n  function setMaximumUnderlying(uint256 _maximumUnderlying) external;\\n\\n  function setPerformanceFee(uint64 _performanceFee) external;\\n\\n  function setFeeRecipient(address _feeRecipient) external;\\n\\n  function setRewardsSeller(IRewardsSeller _rewardsSeller) external;\\n\\n  function setReserveRatio(uint64 _reserveRatio) external;\\n\\n/* ========== Balance Queries ========== */\\n\\n  function balance() external view returns (uint256 sum);\\n\\n  function reserveBalance() external view returns (uint256);\\n\\n/* ========== Fee Queries ========== */\\n\\n  function getPendingFees() external view returns (uint256);\\n\\n/* ========== Price Queries ========== */\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getPricePerFullShareWithFee() external view returns (uint256);\\n\\n/* ========== Reward Token Sales ========== */\\n\\n  function sellRewards(address rewardsToken, bytes calldata params) external;\\n\\n/* ========== Adapter Queries ========== */\\n\\n  function getBalances() external view returns (uint256[] memory balances);\\n\\n  function getAdaptersAndWeights() external view returns (\\n    IErc20Adapter[] memory adapters,\\n    uint256[] memory weights\\n  );\\n\\n/* ========== Liquidity Delta Queries ========== */\\n\\n  function getCurrentLiquidityDeltas() external view returns (int256[] memory liquidityDeltas);\\n  \\n  function getHypotheticalLiquidityDeltas(\\n    uint256[] calldata proposedWeights\\n  ) external view returns (int256[] memory liquidityDeltas);\\n  \\n  function getHypotheticalLiquidityDeltas(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external view returns (int256[] memory liquidityDeltas);\\n\\n/* ========== APR Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getAPRs() external view returns (uint256[] memory aprs);\\n\\n  function getHypotheticalAPR(uint256[] memory proposedWeights) external view returns (uint256);\\n\\n  function getHypotheticalAPR(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external view returns (uint256);\\n\\n/* ========== Deposit/Withdraw ========== */\\n\\n  function deposit(uint256 amount) external returns (uint256 shares);\\n\\n  function depositTo(uint256 amount, address to) external returns (uint256 shares);\\n\\n  function withdraw(uint256 shares) external returns (uint256 owed);\\n\\n  function withdrawUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n/* ========== Rebalance Actions ========== */\\n\\n  function rebalance() external;\\n\\n  function rebalanceWithNewWeights(uint256[] calldata proposedWeights) external;\\n\\n  function rebalanceWithNewAdapters(\\n    IErc20Adapter[] calldata proposedAdapters,\\n    uint256[] calldata proposedWeights\\n  ) external;\\n}\",\"keccak256\":\"0xa2e67bda413e48bbc72cfeab988d707a80fd74a63f59b16e744d795078ee6c44\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.10;\\nimport \\\"./IAdapterRegistry.sol\\\";\\n\\n\\ninterface IProtocolAdapter {\\n  event MarketFrozen(address token);\\n\\n  event MarketUnfrozen(address token);\\n\\n  event AdapterFrozen(address adapter);\\n\\n  event AdapterUnfrozen(address adapter);\\n\\n  function registry() external view returns (IAdapterRegistry);\\n\\n  function frozenAdapters(uint256 index) external view returns (address);\\n\\n  function frozenTokens(uint256 index) external view returns (address);\\n\\n  function totalMapped() external view returns (uint256);\\n\\n  function protocol() external view returns (string memory);\\n\\n  function getUnmapped() external view returns (address[] memory tokens);\\n\\n  function getUnmappedUpTo(uint256 max) external view returns (address[] memory tokens);\\n\\n  function map(uint256 max) external;\\n\\n  function unfreezeAdapter(uint256 index) external;\\n\\n  function unfreezeToken(uint256 index) external;\\n\\n  function freezeAdapter(address adapter) external;\\n}\",\"keccak256\":\"0x1d0fda3ccd42662610c557e6b1df75113bf782bd1ddbddd53826fd41839c88fd\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n\\ninterface IRewardsSeller {\\n  /**\\n   * @dev Sell `rewardsToken` for `underlyingToken`.\\n   * Should only be called after `rewardsToken` is transferred.\\n   * @param sender - Address of account that initially triggered the call. Can be used to restrict who can trigger a sale.\\n   * @param rewardsToken - Address of the token to sell.\\n   * @param underlyingToken - Address of the token to buy.\\n   * @param params - Any additional data that the caller provided.\\n   */\\n  function sellRewards(\\n    address sender,\\n    address rewardsToken,\\n    address underlyingToken,\\n    bytes calldata params\\n  ) external;\\n}\",\"keccak256\":\"0x8a22b1dce3ac025df91db3c5d86823d386d48d27d5920acb2bf89583f5fc89e0\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n\\ninterface IErc20Adapter {\\n/* ========== Metadata ========== */\\n\\n  function underlying() external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function name() external view returns (string memory);\\n\\n  function availableLiquidity() external view returns (uint256);\\n\\n/* ========== Conversion ========== */\\n\\n  function toUnderlyingAmount(uint256 tokenAmount) external view returns (uint256);\\n\\n  function toWrappedAmount(uint256 underlyingAmount) external view returns (uint256);\\n\\n/* ========== Performance Queries ========== */\\n\\n  function getAPR() external view returns (uint256);\\n\\n  function getHypotheticalAPR(int256 liquidityDelta) external view returns (uint256);\\n\\n  function getRevenueBreakdown()\\n    external\\n    view\\n    returns (\\n      address[] memory assets,\\n      uint256[] memory aprs\\n    );\\n\\n/* ========== Caller Balance Queries ========== */\\n\\n  function balanceWrapped() external view returns (uint256);\\n\\n  function balanceUnderlying() external view returns (uint256);\\n\\n/* ========== Interactions ========== */\\n\\n  function deposit(uint256 amountUnderlying) external returns (uint256 amountMinted);\\n\\n  function withdraw(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAll() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlying(uint256 amountUnderlying) external returns (uint256 amountBurned);\\n\\n  function withdrawUnderlyingUpTo(uint256 amountUnderlying) external returns (uint256 amountReceived);\\n}\\n\\ninterface IEtherAdapter is IErc20Adapter {\\n  function depositETH() external payable returns (uint256 amountMinted);\\n\\n  function withdrawAsETH(uint256 amountToken) external returns (uint256 amountReceived);\\n\\n  function withdrawAllAsETH() external returns (uint256 amountReceived);\\n\\n  function withdrawUnderlyingAsETH(uint256 amountUnderlying) external returns (uint256 amountBurned); \\n}\",\"keccak256\":\"0x773adf331e96b40f4ffd3ba357730987a3a0b3915f7593f47d0314ce9a181f61\",\"license\":\"MIT\"},\"contracts/libraries/ArrayHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"../libraries/LowGasSafeMath.sol\\\";\\nimport \\\"../interfaces/ITokenAdapter.sol\\\";\\n\\n\\nlibrary ArrayHelper {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using LowGasSafeMath for uint256;\\n\\n/* ========== Type Cast ========== */\\n\\n  /**\\n   * @dev Cast an enumerable address set as an address array.\\n   * The enumerable set library stores the values as a bytes32 array, this function\\n   * casts it as an address array with a pointer assignment.\\n   */\\n  function toArray(EnumerableSet.AddressSet storage set) internal view returns (address[] memory arr) {\\n    bytes32[] memory bytes32Arr = set._inner._values;\\n    assembly { arr := bytes32Arr }\\n  }\\n\\n  /**\\n   * @dev Cast an array of IErc20Adapter to an array of address using a pointer assignment.\\n   * Note: The resulting array is the same as the original, so all changes to one will be\\n   * reflected in the other.\\n   */\\n  function toAddressArray(IErc20Adapter[] memory _arr) internal pure returns (address[] memory arr) {\\n    assembly { arr := _arr }\\n  }\\n\\n/* ========== Math ========== */\\n\\n  /**\\n   * @dev Computes the sum of a uint256 array.\\n   */\\n  function sum(uint256[] memory arr) internal pure returns (uint256 _sum) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) _sum = _sum.add(arr[i]);\\n  }\\n\\n/* ========== Removal ========== */\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(uint256[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      uint256 last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(address[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      address last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function mremove(IErc20Adapter[] memory arr, uint256 index) internal pure {\\n    uint256 len = arr.length;\\n    if (index != len - 1) {\\n      IErc20Adapter last = arr[len - 1];\\n      arr[index] = last;\\n    }\\n    assembly { mstore(arr, sub(len, 1)) }\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(bytes32[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    bytes32 last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n  /**\\n   * @dev Remove the element at `index` from an array and decrement its length.\\n   * If `index` is the last index in the array, pops it from the array.\\n   * Otherwise, stores the last element in the array at `index` and then pops the last element.\\n   */\\n  function remove(address[] storage arr, uint256 index) internal {\\n    uint256 len = arr.length;\\n    if (index == len - 1) {\\n      arr.pop();\\n      return;\\n    }\\n    address last = arr[len - 1];\\n    arr[index] = last;\\n    arr.pop();\\n  }\\n\\n/* ========== Search ========== */\\n\\n  /**\\n   * @dev Find the index of an address in an array.\\n   * If the address is not found, revert.\\n   */\\n  function indexOf(address[] memory arr, address find) internal pure returns (uint256) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return i;\\n    revert(\\\"element not found\\\");\\n  }\\n\\n  /**\\n   * @dev Determine whether an element is included in an array.\\n   */\\n  function includes(address[] memory arr, address find) internal pure returns (bool) {\\n    uint256 len = arr.length;\\n    for (uint256 i; i < len; i++) if (arr[i] == find) return true;\\n    return false;\\n  }\\n\\n/* ========== Sorting ========== */\\n\\n  /**\\n   * @dev Given an array of tokens and scores, sort by scores in descending order.\\n   * Maintains the relationship between elements of each array at the same index.\\n   */\\n  function sortByDescendingScore(\\n    address[] memory addresses,\\n    uint256[] memory scores\\n  ) internal pure {\\n    uint256 len = addresses.length;\\n    for (uint256 i = 0; i < len; i++) {\\n      uint256 score = scores[i];\\n      address _address = addresses[i];\\n      uint256 j = i - 1;\\n      while (int(j) >= 0 && scores[j] < score) {\\n        scores[j + 1] = scores[j];\\n        addresses[j + 1] = addresses[j];\\n        j--;\\n      }\\n      scores[j + 1] = score;\\n      addresses[j + 1] = _address;\\n    }\\n  }\\n}\",\"keccak256\":\"0xa621d7f9a4dd6a0a1a58324a4334ec3f4014d68e2d5e500f3c2290bd9178426b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/DynamicArrays.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\n/**\\n * @dev Library for handling dynamic in-memory arrays.\\n *\\n * There is a very good reason for Solidity not supporting this by default -- dynamic\\n * arrays in memory completely break memory management for Solidity when used improperly;\\n * however, they can be created manually in a safe way so long as the maximum size is known\\n * beforehand.\\n *\\n * This applies primarily to situations where a subset is taken from an existing array\\n * by some filtering process.\\n *\\n * This library should not be used to bypass Solidity's lack of dynamic memory array\\n * support in any situation where the code could potentially cause the array to exceed\\n * the maximum size assigned in the array creation call. Doing so is likely to have\\n * unintended and unpredictable side effects.\\n */\\nlibrary DynamicArrays {\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicAddressArray(uint256 size) internal pure returns (address[] memory arr) {\\n    arr = new address[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Reserves space in memory for an array of length `size`, but sets the length to 0.\\n   * This can be safely used for a dynamic array so long as the maximum possible size is\\n   * known beforehand. If the array can exceed length `size`, pushing to it will corrupt memory.\\n   */\\n  function dynamicUint256Array(uint256 size) internal pure returns (uint256[] memory arr) {\\n    arr = new uint256[](size);\\n    assembly { mstore(arr, 0) }\\n  }\\n\\n  /**\\n   * @dev Pushes an address to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicAddressArray`. Using it\\n   * on a typical array created with `new address[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(address[] memory arr, address element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n\\n  /**\\n   * @dev Pushes a uint256 to an in-memory array by reassigning the array length and storing\\n   * the element in the position used by solidity for the current array index.\\n   * Note: This should ONLY be used on an array created with `dynamicUint256Array`. Using it\\n   * on a typical array created with `new uint256[]()` will almost certainly have unintended\\n   * and unpredictable side effects.\\n   */\\n  function dynamicPush(uint256[] memory arr, uint256 element) internal pure {\\n    assembly {\\n      let size := mload(arr)\\n      let ptr := add(\\n        add(arr, 32),\\n        mul(size, 32)\\n      )\\n      mstore(ptr, element)\\n      mstore(arr, add(size, 1))\\n    }\\n  }\\n}\",\"keccak256\":\"0x87fb71e6191b84e52ad1382de32d4e5831e593f5017569b2f639416a745de9ad\",\"license\":\"GPL-3.0\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v3-core/blob/main/contracts/libraries/LowGasSafeMath.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash b83fcf497e895ae59b97c9d04e997023f69b5e97.\\n\\nSubject to the GPL-2.0 license\\n*************************************************************************************************/\\n\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x);\\n  }\\n\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, errorMessage);\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y <= x);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    require(y <= x, errorMessage);\\n    z = x - y;\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y);\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y, string memory errorMessage) internal pure returns (uint256 z) {\\n    if (x == 0) return 0;\\n    z = x * y;\\n    require(z / x == y, errorMessage);\\n  }\\n\\n  /// @notice Returns ceil(x / y)\\n  /// @param x The numerator\\n  /// @param y The denominator\\n  /// @return z The quotient of x and y\\n  function divCeil(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = x % y == 0 ? x / y : (x/y) + 1;\\n  }\\n}\\n\",\"keccak256\":\"0xfaf29ecfdaccdec0a6df9cd6740c35f10a928dd2129188dd66936bdc458907c2\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b6127558061007d6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063715018a61161010f578063c29b2686116100a2578063e1e758eb11610071578063e1e758eb14610799578063f2fde38b146107bf578063f6fb74ff146107e5578063ff46d01b1461080b576101f0565b8063c29b26861461071f578063ceb68c2314610745578063d3c7c2c71461076b578063d54e5e4f14610773576101f0565b80638da5cb5b116100de5780638da5cb5b146106a557806396004d82146106ad578063a6aa3ba0146106d3578063b90e34da146106f9576101f0565b8063715018a614610649578063728d31041461065157806378a192f514610659578063887a3ef81461067f576101f0565b80633be4c7fd1161018757806352e900c51161015657806352e900c51461045757806362db2dfc146105265780636b776e2f146105cb5780636edb4728146105f1576101f0565b80633be4c7fd146103805780633eab4c02146103f0578063440d44df146103f85780634f129c5314610431576101f0565b806328e25244116101c357806328e25244146102d657806329f16a0b1461030e5780632c833290146103345780632dc5b1ea1461035a576101f0565b8063016d6950146101f55780630513247b1461022f578063232bacd714610257578063256b5a02146102b0575b600080fd5b61021b6004803603602081101561020b57600080fd5b50356001600160a01b0316610831565b604080519115158252519081900360200190f35b6102556004803603602081101561024557600080fd5b50356001600160a01b0316610854565b005b61028d6004803603606081101561026d57600080fd5b506001600160a01b03813581169160208101359160409091013516610979565b604080516001600160a01b03909316835260208301919091528051918290030190f35b610255600480360360208110156102c657600080fd5b50356001600160a01b03166109c6565b6102fc600480360360208110156102ec57600080fd5b50356001600160a01b0316610b59565b60408051918252519081900360200190f35b6102fc6004803603602081101561032457600080fd5b50356001600160a01b0316610b74565b61021b6004803603602081101561034a57600080fd5b50356001600160a01b0316610d00565b6102fc6004803603602081101561037057600080fd5b50356001600160a01b0316610d15565b6102556004803603602081101561039657600080fd5b8101906020810181356401000000008111156103b157600080fd5b8201836020820111156103c357600080fd5b803590602001918460208302840111640100000000831117156103e557600080fd5b509092509050610d27565b6102fc610d7a565b6104156004803603602081101561040e57600080fd5b5035610d80565b604080516001600160a01b039092168252519081900360200190f35b61021b6004803603602081101561044757600080fd5b50356001600160a01b0316610d9b565b61048d6004803603606081101561046d57600080fd5b506001600160a01b03813581169160208101359160409091013516610db8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104d15781810151838201526020016104b9565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105105781810151838201526020016104f8565b5050505090500194505050505060405180910390f35b6105436004803603602081101561053c57600080fd5b5035610faf565b60405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561058f578181015183820152602001610577565b50505050905090810190601f1680156105bc5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61028d600480360360208110156105e157600080fd5b50356001600160a01b0316611148565b6105f9611190565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561063557818101518382015260200161061d565b505050509050019250505060405180910390f35b6102556111a1565b61048d61125f565b6102556004803603602081101561066f57600080fd5b50356001600160a01b03166112c8565b6104156004803603602081101561069557600080fd5b50356001600160a01b03166113b5565b6104156114de565b610255600480360360208110156106c357600080fd5b50356001600160a01b03166114ed565b610255600480360360208110156106e957600080fd5b50356001600160a01b0316611685565b61021b6004803603602081101561070f57600080fd5b50356001600160a01b03166119eb565b61048d6004803603602081101561073557600080fd5b50356001600160a01b0316611aa8565b6102556004803603602081101561075b57600080fd5b50356001600160a01b0316611bd0565b6105f9611d7f565b6104156004803603602081101561078957600080fd5b50356001600160a01b0316611d8b565b6105f9600480360360208110156107af57600080fd5b50356001600160a01b0316611da9565b610255600480360360208110156107d557600080fd5b50356001600160a01b0316611e1f565b610415600480360360208110156107fb57600080fd5b50356001600160a01b0316611f33565b6102556004803603602081101561082157600080fd5b50356001600160a01b0316611f4e565b6001600160a01b038181166000908152600160205260409020541615155b919050565b61085c611f69565b6001600160a01b031661086d6114de565b6001600160a01b0316146108c8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811660009081526002602052604090205460ff16610921576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020908152604091829020805460ff19169055815192835290517f040b321f0ccd1b9d7890282c99da1d97cbf2de30c3af0782aba31fbd952832439281900390910190a150565b60008060008061098a878787610db8565b915091508160008151811061099b57fe5b60200260200101519350806000815181106109b257fe5b602002602001015192505050935093915050565b3360009081526002602052604090205460ff16610a16576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d6020811015610a7b57600080fd5b50516001600160a01b038082166000908152600160205260409020549192501615610ad6576040805162461bcd60e51b815260206004820152600660248201526565786973747360d01b604482015290519081900360640190fd5b6001600160a01b03818116600090815260016020526040902080546001600160a01b031916918416919091179055610b0f600383611f6d565b50604080516001600160a01b0380841682528416602082015281517f2f0697414292d16e25e419060ebbb3a3318648280380829ca42af307b155393b929181900390910190a15050565b6001600160a01b031660009081526008602052604090205490565b33600090815260076020526040812054151580610ba95750610b946114de565b6001600160a01b0316336001600160a01b0316145b610be6576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6001600160a01b038216610c2a576040805162461bcd60e51b815260206004808301919091526024820152631b9d5b1b60e21b604482015290519081900360640190fd5b6001600160a01b03821660009081526007602052604090205415610c7e576040805162461bcd60e51b815260206004820152600660248201526565786973747360d01b604482015290519081900360640190fd5b5060058054600101908190556001600160a01b0382166000818152600760209081526040808320859055848352600682529182902080546001600160a01b0319168417905581518481529081019290925280517f71f685a16b87e0313c89e4b8cdd720b2b9f03bf7d7adf30781164955703ad55b9281900390910190a1919050565b60026020526000908152604090205460ff1681565b60076020526000908152604090205481565b6000610d3233611f8b565b90508160005b81811015610d73576000858583818110610d4e57fe5b905060200201356001600160a01b03169050610d6a8185611fe0565b50600101610d38565b5050505050565b60055481565b6006602052600090815260409020546001600160a01b031681565b6001600160a01b0316600090815260086020526040902054151590565b606080610dc485611da9565b80519092508067ffffffffffffffff81118015610de057600080fd5b50604051908082528060200260200182016040528015610e0a578160200160208202803683370190505b50915060005b81811015610f9b576000848281518110610e2657fe5b60200260200101519050856001600160a01b0316816001600160a01b03161415610eeb57806001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8357600080fd5b505afa925050508015610ea857506040513d6020811015610ea357600080fd5b505160015b610ecb576000848381518110610eba57fe5b602002602001018181525050610ee6565b80858481518110610ed857fe5b602002602001018181525050505b610f92565b806001600160a01b031663d31c9c29886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610f2f57600080fd5b505afa925050508015610f5457506040513d6020811015610f4f57600080fd5b505160015b610f77576000848381518110610f6657fe5b602002602001018181525050610f92565b80858481518110610f8457fe5b602002602001018181525050505b50600101610e10565b50610fa68383612278565b50935093915050565b6000818152600660205260409020546001600160a01b031660608161101b576040805162461bcd60e51b815260206004820152600a60248201527f696e76616c696420696400000000000000000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316638ce744266040518163ffffffff1660e01b815260040160006040518083038186803b15801561105457600080fd5b505afa158015611068573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561109157600080fd5b81019080805160405193929190846401000000008211156110b157600080fd5b9083019060208201858111156110c657600080fd5b82516401000000008111828201881017156110e057600080fd5b82525081516020918201929091019080838360005b8381101561110d5781810151838201526020016110f5565b50505050905090810190601f16801561113a5780820380516001836020036101000a031916815260200191505b506040525050509050915091565b60008060008061115785611aa8565b915091508160008151811061116857fe5b602002602001015193508060008151811061117f57fe5b602002602001015192505050915091565b606061119c60036123af565b905090565b6111a9611f69565b6001600160a01b03166111ba6114de565b6001600160a01b031614611215576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600554606090819061127081612409565b925061127b81612409565b915060015b8181116112c2576000818152600660205260409020546001600160a01b031680156112b9576112af8582612457565b6112b98483612457565b50600101611280565b50509091565b6112d0611f69565b6001600160a01b03166112e16114de565b6001600160a01b03161461133c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600061134782611f8b565b6001600160a01b0383166000908152600760209081526040808320839055838352600682529182902080546001600160a01b0319169055815183815291519293507f5c7b11df68bc0d197ddf6353cfe4de4df8a39c6dd5e36c7fddad9ec2b9d9c61c92918290030190a15050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d602081101561141b57600080fd5b50516001600160a01b03808216600090815260096020908152604091829020825180840190935254808416808452600160a01b9091046bffffffffffffffffffffffff169183019190915292935091908516146114ab576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6020908101516bffffffffffffffffffffffff166000908152600690915260409020546001600160a01b03169392505050565b6000546001600160a01b031690565b6114f5611f69565b6001600160a01b03166115066114de565b6001600160a01b031614611561576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166115bc576040805162461bcd60e51b815260206004820152600c60248201527f6e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811660009081526002602052604090205460ff161561162a576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920617070726f76656400000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116600081815260026020908152604091829020805460ff19166001179055815192835290517fccfce3c9da81d855858a820abfab9b97cdd212a745e37a5b2e22b5c51e7639719281900390910190a150565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c057600080fd5b505afa1580156116d4573d6000803e3d6000fd5b505050506040513d60208110156116ea57600080fd5b50516001600160a01b03808216600090815260096020908152604091829020825180840190935254808416808452600160a01b9091046bffffffffffffffffffffffff1691830191909152929350919084161461178e576040805162461bcd60e51b815260206004820152600d60248201527f77726f6e67206164617074657200000000000000000000000000000000000000604482015290519081900360640190fd5b60208101516bffffffffffffffffffffffff166117a96114de565b6001600160a01b0316336001600160a01b031614806117de57506000818152600660205260409020546001600160a01b031633145b61182f576040805162461bcd60e51b815260206004820152600b60248201527f21617574686f72697a6564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380841660009081526009602090815260408083208390558051636f307dc360e01b815290519293881692636f307dc392600480840193919291829003018186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d60208110156118ae57600080fd5b50516001600160a01b0381166000908152600860209081526040808320805482518185028101850190935280835294955093611935928a9291869183018282801561192257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611904575b505050505061246c90919063ffffffff16565b90506119418282612507565b815461199057611952600a846125e5565b50604080516001600160a01b038516815290517f1cef54ca6e1745ad87fa3077491d9fc42257e9f1a2d7cad58a4e52bd14dfc6269181900360200190a15b604080516001600160a01b03808a16825260208201879052808616828401528816606082015290517f75df15a742a7404cdede62f71b28fd68db15a67d7c358acaf4f2c770c9bab0539181900360800190a150505050505050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a2757600080fd5b505afa158015611a3b573d6000803e3d6000fd5b505050506040513d6020811015611a5157600080fd5b50516001600160a01b03908116600090815260096020908152604091829020825180840190935254808416808452600160a01b9091046bffffffffffffffffffffffff169290910191909152931690921492915050565b606080611ab483611da9565b80519092508067ffffffffffffffff81118015611ad057600080fd5b50604051908082528060200260200182016040528015611afa578160200160208202803683370190505b50915060005b81811015611bbf57838181518110611b1457fe5b60200260200101516001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5457600080fd5b505afa925050508015611b7957506040513d6020811015611b7457600080fd5b505160015b611b9c576000838281518110611b8b57fe5b602002602001018181525050611bb7565b80848381518110611ba957fe5b602002602001018181525050505b600101611b00565b50611bca8383612278565b50915091565b611bd8611f69565b6001600160a01b0316611be96114de565b6001600160a01b031614611c44576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7f57600080fd5b505afa158015611c93573d6000803e3d6000fd5b505050506040513d6020811015611ca957600080fd5b50516001600160a01b0380821660009081526001602052604090205491925016611d04576040805162461bcd60e51b81526020600482015260076024820152662165786973747360c81b604482015290519081900360640190fd5b6001600160a01b038116600090815260016020526040902080546001600160a01b0319169055611d356003836125e5565b50604080516001600160a01b0380841682528416602082015281517f395da61c7f5ffbcabe770aa45c9f22dd3a6ee925f912cce668d7058ea472bc2c929181900390910190a15050565b606061119c600a6123af565b6001600160a01b039081166000908152600960205260409020541690565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015611e1357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611df5575b50505050509050919050565b611e27611f69565b6001600160a01b0316611e386114de565b6001600160a01b031614611e93576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611ed85760405162461bcd60e51b81526004018080602001828103825260268152602001806127236026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001602052600090815260409020546001600160a01b031681565b6000611f5933611f8b565b9050611f658282611fe0565b5050565b3390565b6000611f82836001600160a01b0384166125fa565b90505b92915050565b6001600160a01b0381166000908152600760205260409020548061084f576040805162461bcd60e51b81526020600482015260076024820152662165786973747360c81b604482015290519081900360640190fd5b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d602081101561204557600080fd5b505160408051637e062a3560e11b815290519192506000916001600160a01b0386169163fc0c546a916004808301926020929190829003018186803b15801561208d57600080fd5b505afa1580156120a1573d6000803e3d6000fd5b505050506040513d60208110156120b757600080fd5b50516001600160a01b038116600090815260096020526040902054909150600160a01b90046bffffffffffffffffffffffff161561213c576040805162461bcd60e51b815260206004820152600e60248201527f6164617074657220657869737473000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600860205260409020546121a257612164600a83611f6d565b50604080516001600160a01b038416815290517f8f50fda9bf5d3b403c53b7e91646abd507f8cebf2577655d55d7de3926168b179181900360200190a15b6001600160a01b03808316600081815260086020908152604080832080546001810182559084528284200180548a87166001600160a01b03199182168117909255825180840184528281526bffffffffffffffffffffffff808c168287019081528a8a168089526009885297869020925183549151909216600160a01b02918a16931692909217909716179095558051948552908401879052838101929092526060830152517f7974f1d75e805656844bd49cd0cc44a1f6a013ddd705892cdde9ecd1933ca2f19181900360800190a150505050565b815160005b818110156123a957600083828151811061229357fe5b6020026020010151905060008583815181106122ab57fe5b6020026020010151905060006001840390505b600081121580156122e15750828682815181106122d757fe5b6020026020010151105b15612359578581815181106122f257fe5b602002602001015186826001018151811061230957fe5b60200260200101818152505086818151811061232157fe5b602002602001015187826001018151811061233857fe5b6001600160a01b0390921660209283029190910190910152600019016122be565b8286826001018151811061236957fe5b6020026020010181815250508187826001018151811061238557fe5b6001600160a01b03929092166020928302919091019091015250505060010161227d565b50505050565b8054604080516020808402820181019092528281526060926000928591908301828280156123fc57602002820191906000526020600020905b8154815260200190600101908083116123e8575b5093979650505050505050565b60608167ffffffffffffffff8111801561242257600080fd5b5060405190808252806020026020018201604052801561244c578160200160208202803683370190505b506000815292915050565b81516020808202840101919091526001019052565b8151600090815b818110156124b957836001600160a01b031685828151811061249157fe5b60200260200101516001600160a01b031614156124b1579150611f859050565b600101612473565b506040805162461bcd60e51b815260206004820152601160248201527f656c656d656e74206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b81546000198101821415612547578280548061251f57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550611f65565b600083600183038154811061255857fe5b9060005260206000200160009054906101000a90046001600160a01b031690508084848154811061258557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550838054806125bd57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b6000611f82836001600160a01b038416612644565b6000612606838361270a565b61263c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611f85565b506000611f85565b60008181526001830160205260408120548015612700578354600019808301919081019060009087908390811061267757fe5b906000526020600020015490508087600001848154811061269457fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806126c457fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611f85565b6000915050611f85565b6000908152600191909101602052604090205415159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a164736f6c6343000706000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063715018a61161010f578063c29b2686116100a2578063e1e758eb11610071578063e1e758eb14610799578063f2fde38b146107bf578063f6fb74ff146107e5578063ff46d01b1461080b576101f0565b8063c29b26861461071f578063ceb68c2314610745578063d3c7c2c71461076b578063d54e5e4f14610773576101f0565b80638da5cb5b116100de5780638da5cb5b146106a557806396004d82146106ad578063a6aa3ba0146106d3578063b90e34da146106f9576101f0565b8063715018a614610649578063728d31041461065157806378a192f514610659578063887a3ef81461067f576101f0565b80633be4c7fd1161018757806352e900c51161015657806352e900c51461045757806362db2dfc146105265780636b776e2f146105cb5780636edb4728146105f1576101f0565b80633be4c7fd146103805780633eab4c02146103f0578063440d44df146103f85780634f129c5314610431576101f0565b806328e25244116101c357806328e25244146102d657806329f16a0b1461030e5780632c833290146103345780632dc5b1ea1461035a576101f0565b8063016d6950146101f55780630513247b1461022f578063232bacd714610257578063256b5a02146102b0575b600080fd5b61021b6004803603602081101561020b57600080fd5b50356001600160a01b0316610831565b604080519115158252519081900360200190f35b6102556004803603602081101561024557600080fd5b50356001600160a01b0316610854565b005b61028d6004803603606081101561026d57600080fd5b506001600160a01b03813581169160208101359160409091013516610979565b604080516001600160a01b03909316835260208301919091528051918290030190f35b610255600480360360208110156102c657600080fd5b50356001600160a01b03166109c6565b6102fc600480360360208110156102ec57600080fd5b50356001600160a01b0316610b59565b60408051918252519081900360200190f35b6102fc6004803603602081101561032457600080fd5b50356001600160a01b0316610b74565b61021b6004803603602081101561034a57600080fd5b50356001600160a01b0316610d00565b6102fc6004803603602081101561037057600080fd5b50356001600160a01b0316610d15565b6102556004803603602081101561039657600080fd5b8101906020810181356401000000008111156103b157600080fd5b8201836020820111156103c357600080fd5b803590602001918460208302840111640100000000831117156103e557600080fd5b509092509050610d27565b6102fc610d7a565b6104156004803603602081101561040e57600080fd5b5035610d80565b604080516001600160a01b039092168252519081900360200190f35b61021b6004803603602081101561044757600080fd5b50356001600160a01b0316610d9b565b61048d6004803603606081101561046d57600080fd5b506001600160a01b03813581169160208101359160409091013516610db8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104d15781810151838201526020016104b9565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105105781810151838201526020016104f8565b5050505090500194505050505060405180910390f35b6105436004803603602081101561053c57600080fd5b5035610faf565b60405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561058f578181015183820152602001610577565b50505050905090810190601f1680156105bc5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61028d600480360360208110156105e157600080fd5b50356001600160a01b0316611148565b6105f9611190565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561063557818101518382015260200161061d565b505050509050019250505060405180910390f35b6102556111a1565b61048d61125f565b6102556004803603602081101561066f57600080fd5b50356001600160a01b03166112c8565b6104156004803603602081101561069557600080fd5b50356001600160a01b03166113b5565b6104156114de565b610255600480360360208110156106c357600080fd5b50356001600160a01b03166114ed565b610255600480360360208110156106e957600080fd5b50356001600160a01b0316611685565b61021b6004803603602081101561070f57600080fd5b50356001600160a01b03166119eb565b61048d6004803603602081101561073557600080fd5b50356001600160a01b0316611aa8565b6102556004803603602081101561075b57600080fd5b50356001600160a01b0316611bd0565b6105f9611d7f565b6104156004803603602081101561078957600080fd5b50356001600160a01b0316611d8b565b6105f9600480360360208110156107af57600080fd5b50356001600160a01b0316611da9565b610255600480360360208110156107d557600080fd5b50356001600160a01b0316611e1f565b610415600480360360208110156107fb57600080fd5b50356001600160a01b0316611f33565b6102556004803603602081101561082157600080fd5b50356001600160a01b0316611f4e565b6001600160a01b038181166000908152600160205260409020541615155b919050565b61085c611f69565b6001600160a01b031661086d6114de565b6001600160a01b0316146108c8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811660009081526002602052604090205460ff16610921576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6001600160a01b038116600081815260026020908152604091829020805460ff19169055815192835290517f040b321f0ccd1b9d7890282c99da1d97cbf2de30c3af0782aba31fbd952832439281900390910190a150565b60008060008061098a878787610db8565b915091508160008151811061099b57fe5b60200260200101519350806000815181106109b257fe5b602002602001015192505050935093915050565b3360009081526002602052604090205460ff16610a16576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d6020811015610a7b57600080fd5b50516001600160a01b038082166000908152600160205260409020549192501615610ad6576040805162461bcd60e51b815260206004820152600660248201526565786973747360d01b604482015290519081900360640190fd5b6001600160a01b03818116600090815260016020526040902080546001600160a01b031916918416919091179055610b0f600383611f6d565b50604080516001600160a01b0380841682528416602082015281517f2f0697414292d16e25e419060ebbb3a3318648280380829ca42af307b155393b929181900390910190a15050565b6001600160a01b031660009081526008602052604090205490565b33600090815260076020526040812054151580610ba95750610b946114de565b6001600160a01b0316336001600160a01b0316145b610be6576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6001600160a01b038216610c2a576040805162461bcd60e51b815260206004808301919091526024820152631b9d5b1b60e21b604482015290519081900360640190fd5b6001600160a01b03821660009081526007602052604090205415610c7e576040805162461bcd60e51b815260206004820152600660248201526565786973747360d01b604482015290519081900360640190fd5b5060058054600101908190556001600160a01b0382166000818152600760209081526040808320859055848352600682529182902080546001600160a01b0319168417905581518481529081019290925280517f71f685a16b87e0313c89e4b8cdd720b2b9f03bf7d7adf30781164955703ad55b9281900390910190a1919050565b60026020526000908152604090205460ff1681565b60076020526000908152604090205481565b6000610d3233611f8b565b90508160005b81811015610d73576000858583818110610d4e57fe5b905060200201356001600160a01b03169050610d6a8185611fe0565b50600101610d38565b5050505050565b60055481565b6006602052600090815260409020546001600160a01b031681565b6001600160a01b0316600090815260086020526040902054151590565b606080610dc485611da9565b80519092508067ffffffffffffffff81118015610de057600080fd5b50604051908082528060200260200182016040528015610e0a578160200160208202803683370190505b50915060005b81811015610f9b576000848281518110610e2657fe5b60200260200101519050856001600160a01b0316816001600160a01b03161415610eeb57806001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8357600080fd5b505afa925050508015610ea857506040513d6020811015610ea357600080fd5b505160015b610ecb576000848381518110610eba57fe5b602002602001018181525050610ee6565b80858481518110610ed857fe5b602002602001018181525050505b610f92565b806001600160a01b031663d31c9c29886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610f2f57600080fd5b505afa925050508015610f5457506040513d6020811015610f4f57600080fd5b505160015b610f77576000848381518110610f6657fe5b602002602001018181525050610f92565b80858481518110610f8457fe5b602002602001018181525050505b50600101610e10565b50610fa68383612278565b50935093915050565b6000818152600660205260409020546001600160a01b031660608161101b576040805162461bcd60e51b815260206004820152600a60248201527f696e76616c696420696400000000000000000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316638ce744266040518163ffffffff1660e01b815260040160006040518083038186803b15801561105457600080fd5b505afa158015611068573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561109157600080fd5b81019080805160405193929190846401000000008211156110b157600080fd5b9083019060208201858111156110c657600080fd5b82516401000000008111828201881017156110e057600080fd5b82525081516020918201929091019080838360005b8381101561110d5781810151838201526020016110f5565b50505050905090810190601f16801561113a5780820380516001836020036101000a031916815260200191505b506040525050509050915091565b60008060008061115785611aa8565b915091508160008151811061116857fe5b602002602001015193508060008151811061117f57fe5b602002602001015192505050915091565b606061119c60036123af565b905090565b6111a9611f69565b6001600160a01b03166111ba6114de565b6001600160a01b031614611215576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600554606090819061127081612409565b925061127b81612409565b915060015b8181116112c2576000818152600660205260409020546001600160a01b031680156112b9576112af8582612457565b6112b98483612457565b50600101611280565b50509091565b6112d0611f69565b6001600160a01b03166112e16114de565b6001600160a01b03161461133c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600061134782611f8b565b6001600160a01b0383166000908152600760209081526040808320839055838352600682529182902080546001600160a01b0319169055815183815291519293507f5c7b11df68bc0d197ddf6353cfe4de4df8a39c6dd5e36c7fddad9ec2b9d9c61c92918290030190a15050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d602081101561141b57600080fd5b50516001600160a01b03808216600090815260096020908152604091829020825180840190935254808416808452600160a01b9091046bffffffffffffffffffffffff169183019190915292935091908516146114ab576040805162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b604482015290519081900360640190fd5b6020908101516bffffffffffffffffffffffff166000908152600690915260409020546001600160a01b03169392505050565b6000546001600160a01b031690565b6114f5611f69565b6001600160a01b03166115066114de565b6001600160a01b031614611561576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166115bc576040805162461bcd60e51b815260206004820152600c60248201527f6e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811660009081526002602052604090205460ff161561162a576040805162461bcd60e51b815260206004820152601060248201527f616c726561647920617070726f76656400000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038116600081815260026020908152604091829020805460ff19166001179055815192835290517fccfce3c9da81d855858a820abfab9b97cdd212a745e37a5b2e22b5c51e7639719281900390910190a150565b6000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c057600080fd5b505afa1580156116d4573d6000803e3d6000fd5b505050506040513d60208110156116ea57600080fd5b50516001600160a01b03808216600090815260096020908152604091829020825180840190935254808416808452600160a01b9091046bffffffffffffffffffffffff1691830191909152929350919084161461178e576040805162461bcd60e51b815260206004820152600d60248201527f77726f6e67206164617074657200000000000000000000000000000000000000604482015290519081900360640190fd5b60208101516bffffffffffffffffffffffff166117a96114de565b6001600160a01b0316336001600160a01b031614806117de57506000818152600660205260409020546001600160a01b031633145b61182f576040805162461bcd60e51b815260206004820152600b60248201527f21617574686f72697a6564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380841660009081526009602090815260408083208390558051636f307dc360e01b815290519293881692636f307dc392600480840193919291829003018186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d60208110156118ae57600080fd5b50516001600160a01b0381166000908152600860209081526040808320805482518185028101850190935280835294955093611935928a9291869183018282801561192257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611904575b505050505061246c90919063ffffffff16565b90506119418282612507565b815461199057611952600a846125e5565b50604080516001600160a01b038516815290517f1cef54ca6e1745ad87fa3077491d9fc42257e9f1a2d7cad58a4e52bd14dfc6269181900360200190a15b604080516001600160a01b03808a16825260208201879052808616828401528816606082015290517f75df15a742a7404cdede62f71b28fd68db15a67d7c358acaf4f2c770c9bab0539181900360800190a150505050505050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a2757600080fd5b505afa158015611a3b573d6000803e3d6000fd5b505050506040513d6020811015611a5157600080fd5b50516001600160a01b03908116600090815260096020908152604091829020825180840190935254808416808452600160a01b9091046bffffffffffffffffffffffff169290910191909152931690921492915050565b606080611ab483611da9565b80519092508067ffffffffffffffff81118015611ad057600080fd5b50604051908082528060200260200182016040528015611afa578160200160208202803683370190505b50915060005b81811015611bbf57838181518110611b1457fe5b60200260200101516001600160a01b031663c89d5b8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b5457600080fd5b505afa925050508015611b7957506040513d6020811015611b7457600080fd5b505160015b611b9c576000838281518110611b8b57fe5b602002602001018181525050611bb7565b80848381518110611ba957fe5b602002602001018181525050505b600101611b00565b50611bca8383612278565b50915091565b611bd8611f69565b6001600160a01b0316611be96114de565b6001600160a01b031614611c44576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611c7f57600080fd5b505afa158015611c93573d6000803e3d6000fd5b505050506040513d6020811015611ca957600080fd5b50516001600160a01b0380821660009081526001602052604090205491925016611d04576040805162461bcd60e51b81526020600482015260076024820152662165786973747360c81b604482015290519081900360640190fd5b6001600160a01b038116600090815260016020526040902080546001600160a01b0319169055611d356003836125e5565b50604080516001600160a01b0380841682528416602082015281517f395da61c7f5ffbcabe770aa45c9f22dd3a6ee925f912cce668d7058ea472bc2c929181900390910190a15050565b606061119c600a6123af565b6001600160a01b039081166000908152600960205260409020541690565b6001600160a01b038116600090815260086020908152604091829020805483518184028101840190945280845260609392830182828015611e1357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611df5575b50505050509050919050565b611e27611f69565b6001600160a01b0316611e386114de565b6001600160a01b031614611e93576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611ed85760405162461bcd60e51b81526004018080602001828103825260268152602001806127236026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001602052600090815260409020546001600160a01b031681565b6000611f5933611f8b565b9050611f658282611fe0565b5050565b3390565b6000611f82836001600160a01b0384166125fa565b90505b92915050565b6001600160a01b0381166000908152600760205260409020548061084f576040805162461bcd60e51b81526020600482015260076024820152662165786973747360c81b604482015290519081900360640190fd5b6000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d602081101561204557600080fd5b505160408051637e062a3560e11b815290519192506000916001600160a01b0386169163fc0c546a916004808301926020929190829003018186803b15801561208d57600080fd5b505afa1580156120a1573d6000803e3d6000fd5b505050506040513d60208110156120b757600080fd5b50516001600160a01b038116600090815260096020526040902054909150600160a01b90046bffffffffffffffffffffffff161561213c576040805162461bcd60e51b815260206004820152600e60248201527f6164617074657220657869737473000000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600860205260409020546121a257612164600a83611f6d565b50604080516001600160a01b038416815290517f8f50fda9bf5d3b403c53b7e91646abd507f8cebf2577655d55d7de3926168b179181900360200190a15b6001600160a01b03808316600081815260086020908152604080832080546001810182559084528284200180548a87166001600160a01b03199182168117909255825180840184528281526bffffffffffffffffffffffff808c168287019081528a8a168089526009885297869020925183549151909216600160a01b02918a16931692909217909716179095558051948552908401879052838101929092526060830152517f7974f1d75e805656844bd49cd0cc44a1f6a013ddd705892cdde9ecd1933ca2f19181900360800190a150505050565b815160005b818110156123a957600083828151811061229357fe5b6020026020010151905060008583815181106122ab57fe5b6020026020010151905060006001840390505b600081121580156122e15750828682815181106122d757fe5b6020026020010151105b15612359578581815181106122f257fe5b602002602001015186826001018151811061230957fe5b60200260200101818152505086818151811061232157fe5b602002602001015187826001018151811061233857fe5b6001600160a01b0390921660209283029190910190910152600019016122be565b8286826001018151811061236957fe5b6020026020010181815250508187826001018151811061238557fe5b6001600160a01b03929092166020928302919091019091015250505060010161227d565b50505050565b8054604080516020808402820181019092528281526060926000928591908301828280156123fc57602002820191906000526020600020905b8154815260200190600101908083116123e8575b5093979650505050505050565b60608167ffffffffffffffff8111801561242257600080fd5b5060405190808252806020026020018201604052801561244c578160200160208202803683370190505b506000815292915050565b81516020808202840101919091526001019052565b8151600090815b818110156124b957836001600160a01b031685828151811061249157fe5b60200260200101516001600160a01b031614156124b1579150611f859050565b600101612473565b506040805162461bcd60e51b815260206004820152601160248201527f656c656d656e74206e6f7420666f756e64000000000000000000000000000000604482015290519081900360640190fd5b81546000198101821415612547578280548061251f57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550611f65565b600083600183038154811061255857fe5b9060005260206000200160009054906101000a90046001600160a01b031690508084848154811061258557fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550838054806125bd57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550505050565b6000611f82836001600160a01b038416612644565b6000612606838361270a565b61263c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611f85565b506000611f85565b60008181526001830160205260408120548015612700578354600019808301919081019060009087908390811061267757fe5b906000526020600020015490508087600001848154811061269457fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806126c457fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050611f85565b6000915050611f85565b6000908152600191909101602052604090205415159056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a164736f6c6343000706000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "adaptersByWrapperToken": {
        "details": "Mapping from wrapper tokens to adapters. "
      },
      "approvedVaultFactories": {
        "details": "Accounts allowed to register vaults. "
      },
      "protocolAdapterIds": {
        "details": "Mapping from protocol adapter addresses to protocol IDs. "
      },
      "protocolAdapters": {
        "details": "Mapping from protocol IDs to adapter addresses. "
      },
      "protocolsCount": {
        "details": "Number of protocol adapters registered. "
      },
      "supportedTokens": {
        "details": "List of all underlying tokens with registered adapters. "
      },
      "tokenAdapters": {
        "details": "Mapping from underlying tokens to lists of adapters. "
      },
      "vaults": {
        "details": "List of all registered vaults. "
      },
      "vaultsByUnderlying": {
        "details": "Mapping from underlying token to registered vault. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1017,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "vaultsByUnderlying",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1023,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "approvedVaultFactories",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1026,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "vaults",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)763_storage"
      },
      {
        "astId": 1030,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "protocolsCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1036,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "protocolAdapters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1042,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "protocolAdapterIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1048,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "tokenAdapters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1053,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "adaptersByWrapperToken",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(TokenAdapter)13008_storage)"
      },
      {
        "astId": 1056,
        "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(AddressSet)763_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(TokenAdapter)13008_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IAdapterRegistry.TokenAdapter)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenAdapter)13008_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AddressSet)763_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 762,
            "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)498_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)498_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 493,
            "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 497,
            "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenAdapter)13008_storage": {
        "encoding": "inplace",
        "label": "struct IAdapterRegistry.TokenAdapter",
        "members": [
          {
            "astId": 13005,
            "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
            "label": "adapter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13007,
            "contract": "contracts/AdapterRegistry.sol:AdapterRegistry",
            "label": "protocolId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}